/*
 * InterestRateView.java
 *
 * Created on 6 August 2003, 11:01
 */

package com.argus.financials.price;

/**
 *
 * @author  Valeri Shibaev
 */

import com.argus.financials.BaseFinancialsView;
import com.argus.financials.utils.RateUtils;

public class InterestRateView extends BaseFinancialsView {
    
    public static void main( String [] args ) {
        main( args, new InterestRateView() );
    }
    
    
    /** Creates new form InterestRateView */
    public InterestRateView() {
        initComponents();
        
        // add listeners
        amountToInvest.addFocusListener( this );
        yearsToInvest.addFocusListener( this );
        continuousCompounding.addItemListener( this );
        compoundedTimes.addFocusListener( this );
        interestRc.addFocusListener( this );
        interestRm.addFocusListener( this );
        
        setToolTipText("Interest rate calculator");
        
        // refresh/init
        execute();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        continuousCompounding = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        amountToInvest = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        yearsToInvest = new javax.swing.JTextField();
        jLabelInterestRate = new javax.swing.JLabel();
        interestRm = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        compoundedTimes = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel221 = new javax.swing.JLabel();
        terminalInvestmentValue = new javax.swing.JTextField();
        jLabelInterestRate2 = new javax.swing.JLabel();
        interestRc = new javax.swing.JTextField();
        info = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        setLayout(new java.awt.GridBagLayout());

        continuousCompounding.setToolTipText("Compounded with frequency or continuously");
        continuousCompounding.setText("Continuous Compounding");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(continuousCompounding, gridBagConstraints);

        jLabel2.setText("Amount to Invest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel2, gridBagConstraints);

        amountToInvest.setToolTipText("Amount invested");
        amountToInvest.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        amountToInvest.setInputVerifier(nif);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(amountToInvest, gridBagConstraints);

        jLabel21.setText("Years to Invest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel21, gridBagConstraints);

        yearsToInvest.setToolTipText("Number of years");
        yearsToInvest.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        yearsToInvest.setInputVerifier(nif);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(yearsToInvest, gridBagConstraints);

        jLabelInterestRate.setText("with compounding frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabelInterestRate, gridBagConstraints);

        interestRm.setToolTipText("Rate of Interest with compounding frequency");
        interestRm.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        interestRm.setInputVerifier(nif);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(interestRm, gridBagConstraints);

        jLabel23.setText("times per annum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel23, gridBagConstraints);

        compoundedTimes.setToolTipText("Compounding frequency");
        compoundedTimes.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        compoundedTimes.setInputVerifier(nif);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(compoundedTimes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        add(jSeparator1, gridBagConstraints);

        jLabel221.setText("Terminal Investment Value");
        jLabel221.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel221, gridBagConstraints);

        terminalInvestmentValue.setToolTipText("Rate of Interest with compounding frequency or continuously compounded");
        terminalInvestmentValue.setEditable(false);
        terminalInvestmentValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        terminalInvestmentValue.setInputVerifier(nif);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(terminalInvestmentValue, gridBagConstraints);

        jLabelInterestRate2.setText("continuously compounded");
        jLabelInterestRate2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabelInterestRate2, gridBagConstraints);

        interestRc.setToolTipText("Rate of Interest continuously compounded");
        interestRc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        interestRc.setInputVerifier(nif);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(interestRc, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(info, gridBagConstraints);

        jLabel3.setText("Interest Rate, %");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(jSeparator2, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel info;
    private javax.swing.JTextField compoundedTimes;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JTextField interestRm;
    private javax.swing.JTextField interestRc;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JTextField yearsToInvest;
    private javax.swing.JTextField amountToInvest;
    private javax.swing.JCheckBox continuousCompounding;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel jLabelInterestRate;
    private javax.swing.JLabel jLabelInterestRate2;
    private javax.swing.JTextField terminalInvestmentValue;
    // End of variables declaration//GEN-END:variables
    
    /**
     *
     */
    protected void execute() {
        
        boolean continuous = continuousCompounding.isSelected();
        interestRm.setEditable( !continuous );
        interestRc.setEditable( continuous );

        try {
            double a = nif.doubleValue( amountToInvest.getText() );
            double n = nif.doubleValue( yearsToInvest.getText() );
            double m = nif.doubleValue( compoundedTimes.getText() );
            
            double ca;
            double Rm;
            double Rc;
            if ( continuous ) {
                Rc = nif.doubleValue( interestRc.getText() ) / 100.;
                Rm = RateUtils.getCompoundedRate( Rc, m );
                interestRm.setText( nif.getNumberFormatter().toString( Rm * 100. ) );

                ca = RateUtils.getCompoundedAmount( a, Rc, n );
            } else {
                Rm = nif.doubleValue( interestRm.getText() ) / 100.;
                Rc = RateUtils.getContinuouslyCompoundedRate( Rm, m );
                interestRc.setText( nif.getNumberFormatter().toString( Rc * 100. ) );

                ca = RateUtils.getCompoundedAmount( a, Rm, n, m );
            }
            
            terminalInvestmentValue.setText( nif.getNumberFormatter().toString( ca ) );
            
        } catch ( NumberFormatException e ) { 
//System.err.println( e.getMessage() ); 
            if ( continuous ) {
                interestRm.setText( "" );
            } else {
                interestRc.setText( "" );
            }
            
            terminalInvestmentValue.setText( "" );
        }
        
    }
    
}
