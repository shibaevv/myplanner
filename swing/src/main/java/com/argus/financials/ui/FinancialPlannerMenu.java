/*
 * FinancialPlannerMenu.java
 *
 * Created on 31 October 2002, 17:41
 */

package com.argus.financials.ui;

/**
 * 
 * @author valeri chibaev
 */

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.FocusListener;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.UIManager;

import com.argus.financials.code.ModelType;
import com.argus.financials.etc.ActionEventID;
import com.argus.financials.projection.save.Model;
import com.argus.financials.projection.save.ModelCollection;
import com.argus.financials.service.ClientService;
import com.argus.financials.ui.help.HelpBrokerView;
import com.argus.swing.SwingUtils;
import com.argus.util.Pair;

public class FinancialPlannerMenu extends JMenuBar
    implements IFinancialPlannerNavigator,
        ActionEventID, FocusListener
{

    public static final Dimension DEFAULT_MENU_DIM = new java.awt.Dimension(
            100, 21);

    private final FinancialPlannerPermission fpp = FinancialPlannerPermission.getInstance();

    private static ClientService clientService;
    public static void setClientService(ClientService clientService) {
        FinancialPlannerMenu.clientService = clientService;
    }

    /** Creates new */
    FinancialPlannerMenu(ActionMap am) {
        setActionMap(am);
        initComponents();
    }

    /**
     * 
     */
    public void addActionListener(java.awt.event.ActionListener al) {
        addActionListener(this, al);
    }

    private void addActionListener(java.awt.Container container,
            java.awt.event.ActionListener al) {

        for (int i = 0; i < container.getComponentCount(); i++) {

            java.awt.Component comp = container.getComponent(i);

            if (comp instanceof javax.swing.JMenu) { // inherit from
                                                        // javax.swing.JMenuItem
                MenuElement[] me = ((JMenu) comp).getSubElements();

                if (me == null)
                    continue;

                for (int j = 0; j < me.length; j++)
                    if (comp instanceof java.awt.Container)
                        addActionListener((java.awt.Container) me[j], al);

            }
            if (comp instanceof javax.swing.JMenuItem) {
                ((javax.swing.JMenuItem) comp).addActionListener(al);
            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {// GEN-BEGIN:initComponents
        jMenuFile = createTaskGroup(this, "File");
        if (fpp.checkPermissions(IMenuCommand.EXPORT))
            jMenuFile.add(getActionMap().get(IMenuCommand.EXPORT));
        if (fpp.checkPermissions(IMenuCommand.IMPORT))
            jMenuFile.add(getActionMap().get(IMenuCommand.IMPORT));
        jMenuFile.add(getActionMap().get(IMenuCommand.EXIT));

        jMenuClientDetails = createTaskGroup(this, "ClientView Focus");
        jMenuClientDetails.add(getActionMap().get(IMenuCommand.SEARCH_CLIENT));
        if (fpp.checkPermissions(IMenuCommand.ADD_CLIENT))
            jMenuClientDetails.add(getActionMap().get(IMenuCommand.ADD_CLIENT));
        jMenuClientDetails.add(getActionMap().get(IMenuCommand.CLIENT_DETAILS));
        if (fpp.checkPermissions(IMenuCommand.RISK_EVALUATION_CLIENT))
            jMenuClientDetails.add(getActionMap().get(IMenuCommand.RISK_EVALUATION_CLIENT));
        jMenuClientDetails.add(getActionMap().get(IMenuCommand.FINANCIALS));

        jMenuPartnerDetails = createTaskGroup(this, "Partner Focus");
        jMenuPartnerDetails.add(getActionMap().get(IMenuCommand.PARTNER_DETAILS));
        if (fpp.checkPermissions(IMenuCommand.RISK_EVALUATION_PARTNER))
            jMenuPartnerDetails.add(getActionMap().get(IMenuCommand.RISK_EVALUATION_PARTNER));

        if (fpp.checkPermissions(IMenuCommand.STRATEGIC_ADVICE)) {
            jMenuStrategyDevelopment = createTaskGroup(this, (String) IMenuCommand.STRATEGIC_ADVICE.getSecond());
            jMenuStrategyDevelopment.add(getActionMap().get(IMenuCommand.STRATEGY_DESINER));
        }
        
        jMenuCalculators = createTaskGroup(this, "Analysis & Projection Tools");
        updateCalculators();

        if (fpp.checkPermissions(IMenuCommand.PLAN_WIZARD)) {
            officeIntegration = createTaskGroup(this, "Office Integration");
            officeIntegration.add(getActionMap().get(IMenuCommand.PLAN_WIZARD));
            officeIntegration.add(getActionMap().get(IMenuCommand.PLAN_TEMPLATE_WIZARD));
        }
    
        jMenuTools = createTaskGroup(this, "Tools");
        //jMenuTools.add(getActionMap().get(IMenuCommand.UPDATE_REF_DATA));
        //jMenuTools.add(getActionMap().get(IMenuCommand.MAINTAIN_REF_DATA));
        //jMenuTools.add(getActionMap().get(IMenuCommand.SWAP_ASSETS));
        //jMenuTools.add(getActionMap().get(IMenuCommand.RECOVER_ASSETS));
        //jMenuTools.add(getActionMap().get(IMenuCommand.REMOVE_ASSETS));
        jMenuTools.add(getActionMap().get(IMenuCommand.SOFTWARE_UPDATES));
//        jMenuTools.add(getActionMap().get(IMenuCommand.SYSTEM_OUT));
//        jMenuTools.add(getActionMap().get(IMenuCommand.SYSTEM_ERR));
        // look-and-feel
        UIManager.LookAndFeelInfo[] info = UIManager.getInstalledLookAndFeels();
        JMenu jMenuLookAndFeel = createTaskGroup(jMenuFile, "Look-And-Feels");
        for (int i = 0; i < info.length; i++) {
            String lookAndFeelName = info[i].getName();
            jMenuLookAndFeel.add(getActionMap().get(lookAndFeelName));
        }

        jMenuHelp = createTaskGroup(this, "Help");
        if (fpp.checkPermissions(IMenuCommand.CONTENTS_INDEX)) {
            jMenuHelp.add(getActionMap().get(IMenuCommand.CONTENTS_INDEX));
            HelpBrokerView.initHelpMenu(jMenuHelp);
        }
        jMenuHelp.add(getActionMap().get(IMenuCommand.FEEDBACK));
        jMenuHelp.add(getActionMap().get(IMenuCommand.ABOUT));
        
        setPreferredSize(new java.awt.Dimension(630, 23));
    }// GEN-END:initComponents

    public void focusGained(java.awt.event.FocusEvent focusEvent) {
    }

    public void focusLost(java.awt.event.FocusEvent focusEvent) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenuStrategyDevelopment;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JMenu jMenuCalculators;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuClientDetails;
    private javax.swing.JMenu jMenuPartnerDetails;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenu officeIntegration;
    // End of variables declaration//GEN-END:variables

    private JMenu createTaskGroup(JComponent parent, String title) {
        JMenu taskGroup = new JMenu(title);
        parent.add(taskGroup);
        return taskGroup;
    }
    
    private JMenu createTaskGroup4Calculators(
            JComponent parent, Pair command) 
    {
        if (fpp.checkPermissions(command)) {
            JMenu taskGroup = createTaskGroup(parent, (String) command.getSecond());
            taskGroup.add(getActionMap().get(command));
            return taskGroup;
        }
        return null;
    }

    /* (non-Javadoc)
     * @see com.argus.financials.ui.IFinancialPlannerNavigator#updateCalculators()
     */
    public void updateCalculators() {
        
        //clearCalculators(jTaskPaneGroupCalculators);
        jMenuCalculators.removeAll();

        JMenu jMenuQuickView = createTaskGroup4Calculators(jMenuCalculators, IMenuCommand.CURRENT_POSITION_CALC);
        JMenu jMenuEtpRollover = createTaskGroup4Calculators(jMenuCalculators, IMenuCommand.ETP_ROLLOVER_CALC);
        JMenu jMenuAllocatedPension = createTaskGroup4Calculators(jMenuCalculators, IMenuCommand.ALOCATED_PENSION_CALC);
        JMenu jMenuInvestmentGearing = createTaskGroup4Calculators(jMenuCalculators, IMenuCommand.INVESTMENT_GEARING_CALC);
        JMenu jMenuCentrelink = createTaskGroup4Calculators(jMenuCalculators, IMenuCommand.CENTRELINK_CALC);
        JMenu jMenuMortgageLoan = createTaskGroup4Calculators(jMenuCalculators, IMenuCommand.LOAN_AND_MORTGAGE_CALC);
        JMenu jMenuPayg = createTaskGroup4Calculators(jMenuCalculators, IMenuCommand.PAYG_CALC);

        // add saved ones
        ClientService person = clientService;
        if (person == null)
            return;

        try {
            ModelCollection models = person.getModels();
            if (models == null)
                return;

            Iterator iterModels = models.entrySetIterator();
            while (iterModels.hasNext()) {
                Map.Entry entry = (Map.Entry) iterModels.next();
                Integer modelTypeID = (Integer) entry.getKey();

                Iterator iter = ((Vector) entry.getValue()).iterator();
                while (iter.hasNext()) {
                    final Model model = (Model) iter.next();
                    Action action;
                    
                    switch (modelTypeID.intValue()) {
                        case ModelType.iCURRENT_POSITION_CALC:
                            action = new AbstractAction(model.getTitle()) {
                                public void actionPerformed(ActionEvent evt) {
                                    Action a = getActionMap().get(IMenuCommand.CURRENT_POSITION_CALC);
                                    evt.setSource(model);
                                    a.actionPerformed(evt);
                                }
                            };
                            if (jMenuQuickView != null)
                                jMenuQuickView.add(action);
                            break;
                        case ModelType.iINSURANCE_NEEDS:
    
                        case ModelType.iPREMIUM_CALC:
    
                        case ModelType.iINVESTMENT_GEARING:
                            action = new AbstractAction(model.getTitle()) {
                                public void actionPerformed(ActionEvent evt) {
                                    Action a = getActionMap().get(IMenuCommand.INVESTMENT_GEARING_CALC);
                                    evt.setSource(model);
                                    a.actionPerformed(evt);
                                }
                            };
                            if (jMenuInvestmentGearing != null)
                                jMenuInvestmentGearing.add(action);
                            break;
                        case ModelType.iPROJECTED_WEALTH:
    
                        case ModelType.iINVESTMENT_PROPERTIES:
    
                        case ModelType.iLOAN_MORTGAGE_CALC:
                            action = new AbstractAction(model.getTitle()) {
                                public void actionPerformed(ActionEvent evt) {
                                    Action a = getActionMap().get(IMenuCommand.LOAN_AND_MORTGAGE_CALC);
                                    evt.setSource(model);
                                    a.actionPerformed(evt);
                                }
                            };
                            if (jMenuMortgageLoan != null)
                                jMenuMortgageLoan.add(action);
                            break;
                        case ModelType.iALLOCATED_PENSION:
                            action = new AbstractAction(model.getTitle()) {
                                public void actionPerformed(ActionEvent evt) {
                                    Action a = getActionMap().get(IMenuCommand.ALOCATED_PENSION_CALC);
                                    evt.setSource(model);
                                    a.actionPerformed(evt);
                                }
                            };
                            if (jMenuAllocatedPension != null)
                                jMenuAllocatedPension.add(action);
                            break;
                        case ModelType.iETP_ROLLOVER:
                            action = new AbstractAction(model.getTitle()) {
                                public void actionPerformed(ActionEvent evt) {
                                    Action a = getActionMap().get(IMenuCommand.ETP_ROLLOVER_CALC);
                                    evt.setSource(model);
                                    a.actionPerformed(evt);
                                }
                            };
                            if (jMenuEtpRollover != null)
                                jMenuEtpRollover.add(action);
                            break;
                        case ModelType.iSUPERANNUATION_RBL:
    
                        case ModelType.iRETIREMENT_CALC:
    
                        case ModelType.iRETIREMENT_HOME:
    
                        case ModelType.iPAYG_CALC:
                            action = new AbstractAction(model.getTitle()) {
                                public void actionPerformed(ActionEvent evt) {
                                    Action a = getActionMap().get(IMenuCommand.PAYG_CALC);
                                    evt.setSource(model);
                                    a.actionPerformed(evt);
                                }
                            };
                            if (jMenuPayg != null)
                                jMenuPayg.add(action);
                            break;
                        case ModelType.iCGT_CALC:
    
                        case ModelType.iCENTRELINK_CALC:
                            action = new AbstractAction(model.getTitle()) {
                                public void actionPerformed(ActionEvent evt) {
                                    Action a = getActionMap().get(IMenuCommand.CENTRELINK_CALC);
                                    evt.setSource(model);
                                    a.actionPerformed(evt);
                                }
                            };
                            if (jMenuCentrelink != null)
                                jMenuCentrelink.add(action);
                            break;
                        default:
                            continue;
                    }

                }

            }

            SwingUtils.setDefaultFont(this);
            
        } catch (com.argus.financials.api.ServiceException e) {
            e.printStackTrace();
        }

    }

//    /**
//     * 
//     */
//    private JMenu getModelParentMenu(Integer modelTypeID) {
//
//        switch (modelTypeID.intValue()) {
//            case ModelType.iQUICK_VIEW:
//                return jMenuQuickView;
//            case ModelType.iINSURANCE_NEEDS:
//                return null;
//            case ModelType.iPREMIUM_CALC:
//                return null;
//            case ModelType.iINVESTMENT_GEARING:
//                return jMenuGearing;
//            case ModelType.iPROJECTED_WEALTH:
//                return null;
//            case ModelType.iINVESTMENT_PROPERTIES:
//                return null;
//            case ModelType.iLOAN_MORTGAGE_CALC:
//                return jMenuLoans;
//            case ModelType.iALLOCATED_PENSION:
//                return jMenuAP;
//            case ModelType.iETP_ROLLOVER:
//                return jMenuETP;
//            case ModelType.iSUPERANNUATION_RBL:
//                return null;
//            case ModelType.iRETIREMENT_CALC:
//                return null;
//            case ModelType.iRETIREMENT_HOME:
//                return null;
//            case ModelType.iPAYG_CALC:
//                return jMenuTax;
//            case ModelType.iCGT_CALC:
//                return null;
//            case ModelType.iCENTRELINK_CALC:
//                return jMenuCentrelinkCalculator;
//            default:
//                return null;
//        }
//
//    }
//
//    private JMenuItem getModelNewMenu(Integer modelTypeID) {
//        JMenu menu = getModelParentMenu(modelTypeID);
//        if (menu == null)
//            return null;
//
//        return menu.getItemCount() > 0 ? menu.getItem(0) : null;
//    }

    // clear non default sub-menues
    private void clearModelsMenu(JComponent parentMenu) {

        MenuElement[] me = null;

        if (parentMenu instanceof JMenu)
            me = ((JMenu) parentMenu).getSubElements();
        else if (parentMenu instanceof JPopupMenu)
            me = ((JPopupMenu) parentMenu).getSubElements();

        if (me == null)
            return;

        for (int i = me.length - 1; i >= 0; i--) {
            if (me[i] instanceof JMenu)
                clearModelsMenu((JMenu) me[i]);
            else if (me[i] instanceof JPopupMenu)
                clearModelsMenu((JPopupMenu) me[i]);
            else if (me[i] instanceof JMenuItem) {
                if (!IMenuCommand.NEW.getSecond().equals(((JMenuItem) me[i]).getText()))
                    parentMenu.remove((JMenuItem) me[i]);
            }

        }

    }

}
