/*
 * ImportDataView.java
 *
 * Created on 19 June 2003, 12:57
 */

package com.argus.financials.ui.sql;

/**
 * 
 * @author Valeri CHIBAEV (mailto:apollosoft.net.au@gmail.com)
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

import com.argus.bean.AbstractComponentModel;
import com.argus.bean.FTable;
import com.argus.bean.FTextArea;
import com.argus.bean.FTextField;
import com.argus.bean.MessageSent;
import com.argus.bean.MessageSentEvent;
import com.argus.bean.WizardContentHandler;
import com.argus.financials.exchange.ExportData;
import com.argus.financials.swing.ICloseDialog;
import com.argus.financials.swing.SwingUtil;
import com.argus.financials.swing.table.SortedTableModel;
import com.argus.io.IOUtils;
import com.argus.swing.SplashWindow;
import com.argus.swing.SwingUtils;
import com.argus.util.KeyValue;

public class ImportDataView extends com.argus.bean.BasePanel implements
        ICloseDialog {

    private final static String XML = "xml";

    private final static String DOT_XML = "." + XML;

    private static final String WIZARD = "Wizard";

    private static final String STEP_1 = "1";

    private static final String STEP_2 = "2";

    private static final String STEP_3 = "3";

    private static final String STEP_4 = "4";

    public static final int CANCEL_OPTION = javax.swing.JOptionPane.CANCEL_OPTION;

    public static final int OK_OPTION = javax.swing.JOptionPane.OK_OPTION;

    private int result; // CANCEL_OPTION, OK_OPTION

    private Object[][] steps;

    private ImportComponentModel model;

    private WizardContentHandler wch;

    /** Creates new form ImportDataView */
    public ImportDataView() {
        initComponents();

        tableStep2.setShowVerticalLines(false);

        steps = new Object[][] {
                { STEP_1, "Select Source Directory", jPanelStep1 },
                { STEP_2, "Select ClientView Data Files", jPanelStep2 },
                { STEP_3, "Summary of Selection", jPanelStep3 },
                { STEP_4, "Summary of Import", jPanelStep4 }, };

        jLabelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/image/Import.gif")));

        model = new ImportComponentModel();
        addFormDataModel(model);
        model.addModelDataChangedListener(this);
        model.addMessageSentListener(this);

        // Add wizard content handler
        wch = new WizardContentHandler(jPanelCards);
        jPanelCards.setLayout(wch);

        for (int i = 0; i < steps.length; i++) {
            wch.addItem(new KeyValue(steps[i][1], steps[i][0]));
            wch.addLayoutComponent((java.awt.Component) steps[i][2],
                    steps[i][0]);
        }

        wch.setButtonNext(jButtonNext);
        wch.setButtonPrevious(jButtonPrevious);
        wch.setLabel(jLabelInfo);

        wch.addFormDataChangedListener(this);
        wch.registerComponent(WIZARD, this);

        jPanelSteps.add(wch.getPanel());

        addChangedListener();
        registerComponents();

        // reset to initial state
        reset();

    }

    private void addChangedListener() {

        ((FTextField) textFieldStep1).addFormDataChangedListener(this);

        ((FTable) tableStep2).addFormDataChangedListener(this);

        ((FTextArea) textAreaDetailsStep3).addFormDataChangedListener(this);

        ((FTextArea) textAreaDetailsStep4).addFormDataChangedListener(this);

    }

    private void registerComponents() {

        ((FTextField) textFieldStep1).registerComponent(STEP_1, this);

        ((FTable) tableStep2).registerComponent(STEP_2, this);

        ((FTextArea) textAreaDetailsStep3).registerComponent(STEP_3, this);

        ((FTextArea) textAreaDetailsStep4).registerComponent(STEP_4, this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {// GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelNavigation = new javax.swing.JPanel();
        jLabelImage = new javax.swing.JLabel();
        jPanelSteps = new javax.swing.JPanel();
        jSeparatorVertical = new javax.swing.JSeparator();
        jPanelCenter = new javax.swing.JPanel();
        jPanelInfo = new javax.swing.JPanel();
        jLabelInfo = new javax.swing.JLabel();
        jPanelCards = new javax.swing.JPanel();
        jPanelStep1 = new javax.swing.JPanel();
        textFieldStep1 = new FTextField();
        ((FTextField) textFieldStep1)
                .setFieldType(com.argus.bean.FTextField.ANY);
        jButtonStep1 = new javax.swing.JButton();
        jPanelStep2 = new javax.swing.JPanel();
        jScrollPaneStep2 = new javax.swing.JScrollPane();
        tableStep2 = new com.argus.bean.FTable();
        jPanelStep3 = new javax.swing.JPanel();
        jScrollPaneDetailsStep3 = new javax.swing.JScrollPane();
        textAreaDetailsStep3 = new com.argus.bean.FTextArea();
        jPanelStep4 = new javax.swing.JPanel();
        jScrollPaneDetailsStep4 = new javax.swing.JScrollPane();
        textAreaDetailsStep4 = new com.argus.bean.FTextArea();
        jSeparatorHorizontal = new javax.swing.JSeparator();
        jPanelControls = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonReport = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonClose = new javax.swing.JButton();
        jButtonImport = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButtonPrevious = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10,
                10, 10, 10)));
        setPreferredSize(new java.awt.Dimension(600, 400));
        jPanelNavigation.setLayout(new javax.swing.BoxLayout(jPanelNavigation,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelNavigation.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(1, 1, 1, 10)));
        jPanelNavigation.add(jLabelImage);

        jPanelSteps.setLayout(new javax.swing.BoxLayout(jPanelSteps,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelSteps.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(10, 1, 1, 1)));
        jPanelNavigation.add(jPanelSteps);

        add(jPanelNavigation);

        jSeparatorVertical.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparatorVertical);

        jPanelCenter.setLayout(new javax.swing.BoxLayout(jPanelCenter,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelCenter.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(1, 10, 10, 1)));
        jPanelInfo
                .setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jLabelInfo.setText("<html><h1>Info</h1><html>");
        jLabelInfo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelInfo.setFont(new java.awt.Font("Arial", 1, 24));
        jPanelInfo.add(jLabelInfo);

        jPanelCenter.add(jPanelInfo);

        jPanelCards.setLayout(new java.awt.CardLayout());

        jPanelCards.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(1, 1, 10, 1)));
        jPanelStep1.setLayout(new java.awt.GridBagLayout());

        textFieldStep1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanelStep1.add(textFieldStep1, gridBagConstraints);

        jButtonStep1.setText("Browse");
        jButtonStep1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStep1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanelStep1.add(jButtonStep1, gridBagConstraints);

        jPanelCards.add(jPanelStep1, "ExportStep2");

        jPanelStep2.setLayout(new javax.swing.BoxLayout(jPanelStep2,
                javax.swing.BoxLayout.Y_AXIS));

        jScrollPaneStep2.setViewportView(tableStep2);

        jPanelStep2.add(jScrollPaneStep2);

        jPanelCards.add(jPanelStep2, "ExportStep1");

        jPanelStep3.setLayout(new javax.swing.BoxLayout(jPanelStep3,
                javax.swing.BoxLayout.Y_AXIS));

        textAreaDetailsStep3.setEditable(false);
        textAreaDetailsStep3.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPaneDetailsStep3.setViewportView(textAreaDetailsStep3);

        jPanelStep3.add(jScrollPaneDetailsStep3);

        jPanelCards.add(jPanelStep3, "ExportStep3");

        jPanelStep4.setLayout(new javax.swing.BoxLayout(jPanelStep4,
                javax.swing.BoxLayout.Y_AXIS));

        textAreaDetailsStep4.setEditable(false);
        textAreaDetailsStep4.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPaneDetailsStep4.setViewportView(textAreaDetailsStep4);

        jPanelStep4.add(jScrollPaneDetailsStep4);

        jPanelCards.add(jPanelStep4, "ExportStep4");

        jPanelCenter.add(jPanelCards);

        jPanelCenter.add(jSeparatorHorizontal);

        jPanelControls.setLayout(new javax.swing.BoxLayout(jPanelControls,
                javax.swing.BoxLayout.X_AXIS));

        jButtonReport.setText("Report");
        jButtonReport.setDefaultCapable(false);
        jButtonReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReportActionPerformed(evt);
            }
        });

        jPanel2.add(jButtonReport);

        jPanelControls.add(jPanel2);

        jButtonClose.setText("Close");
        jButtonClose.setDefaultCapable(false);
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonClose);

        jButtonImport.setText("Import");
        jButtonImport.setDefaultCapable(false);
        jButtonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonImport);

        jPanelControls.add(jPanel3);

        jButtonPrevious.setText("Previous");
        jPanel4.add(jButtonPrevious);

        jButtonNext.setText("Next");
        jPanel4.add(jButtonNext);

        jPanelControls.add(jPanel4);

        jPanelCenter.add(jPanelControls);

        add(jPanelCenter);

    }// GEN-END:initComponents

    private void jButtonReportActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonReportActionPerformed
        // new Thread( new Runnable() { public void run() {
        doReport();
        // } }, "doReport" ).start();
    }// GEN-LAST:event_jButtonReportActionPerformed

    private void jButtonImportActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonImportActionPerformed
        doImport();
    }// GEN-LAST:event_jButtonImportActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCloseActionPerformed
        // result = closeDialog(this);
        doClose(null);
    }// GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonStep1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStep1ActionPerformed
        String dir = "";
        if (getFileChooser().showOpenDialog(SwingUtil.getJFrame(this)) == JFileChooser.APPROVE_OPTION)
            dir = fileChooser.getSelectedFile().getPath();
        /*
         * textFieldStep1.setText( dir ); SwingUtilities.invokeLater( new
         * Runnable() { public void run() { // first
         * textFieldStep1.requestFocus();
         * 
         * SwingUtilities.invokeLater( new Runnable() { public void run() {
         * textFieldStep1.transferFocus(); // need to be syncronized with first
         * invokeLater() } } ); } } );
         */
        ((FTextField) textFieldStep1).setText(dir, true);

    }// GEN-LAST:event_jButtonStep1ActionPerformed

    public void doSave(java.awt.event.ActionEvent evt) {

    }

    public boolean isModified() {
        return model.isModified();
    }

    public static int closeDialog(ICloseDialog view) {

        int result;
        if (view.isModified()) {
            result = JOptionPane
                    .showConfirmDialog(
                            view instanceof java.awt.Component ? (java.awt.Component) view
                                    : null,
                            "Do you want to save data before closing?",
                            "Close dialog", JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE);

            if (result == JOptionPane.YES_OPTION) {
                view.doSave(null);
                result = OK_OPTION;
                view.doClose(null);

            } else if (result == JOptionPane.NO_OPTION) {
                result = OK_OPTION;
                view.doClose(null);

            } else {
                result = CANCEL_OPTION;
                // keep open
            }

        } else {
            result = OK_OPTION;
            view.doClose(null);
        }

        return result;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparatorHorizontal;

    private javax.swing.JButton jButtonStep1;

    private javax.swing.JTable tableStep2;

    private javax.swing.JPanel jPanelCards;

    private javax.swing.JTextArea textAreaDetailsStep4;

    private javax.swing.JTextArea textAreaDetailsStep3;

    private javax.swing.JPanel jPanelControls;

    private javax.swing.JTextField textFieldStep1;

    private javax.swing.JButton jButtonImport;

    private javax.swing.JPanel jPanelSteps;

    private javax.swing.JButton jButtonClose;

    private javax.swing.JLabel jLabelImage;

    private javax.swing.JPanel jPanelInfo;

    private javax.swing.JScrollPane jScrollPaneStep2;

    private javax.swing.JSeparator jSeparatorVertical;

    private javax.swing.JButton jButtonReport;

    private javax.swing.JButton jButtonNext;

    private javax.swing.JButton jButtonPrevious;

    private javax.swing.JPanel jPanelStep4;

    private javax.swing.JPanel jPanelNavigation;

    private javax.swing.JPanel jPanelStep3;

    private javax.swing.JPanel jPanelStep2;

    private javax.swing.JPanel jPanelStep1;

    private javax.swing.JPanel jPanel4;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanelCenter;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JScrollPane jScrollPaneDetailsStep4;

    private javax.swing.JScrollPane jScrollPaneDetailsStep3;

    private javax.swing.JLabel jLabelInfo;

    // End of variables declaration//GEN-END:variables

    class ImportFile extends Object {

        private java.io.File file;

        ImportFile(java.io.File file) {
            this.file = file;
        }

        public String toString() {
            return file.getName();
        }

        public String getCanonicalPath() throws java.io.IOException {
            return file.getCanonicalPath();
        }

        public boolean equals(Object obj) {
            if (this == obj)
                return true;

            if (obj == null || !(obj instanceof ImportFile))
                return false;

            return toString().equals(((ImportFile) obj).toString())
            // file.equals( ( ( ImportFile ) obj ).file )
            ;
        }

    }

    // //////////////////////////////////////////////////////////////////////////
    // EXPORT STEP 1 //
    // //////////////////////////////////////////////////////////////////////////
    private javax.swing.JFileChooser fileChooser;

    private javax.swing.JFileChooser getFileChooser() {

        if (fileChooser != null)
            return fileChooser;

        fileChooser = new javax.swing.JFileChooser();
        SwingUtils.setDefaultFont(fileChooser);
        fileChooser
                .setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

            }
        });

        return fileChooser;

    }

    // //////////////////////////////////////////////////////////////////////////
    // EXPORT STEP 2 //
    // //////////////////////////////////////////////////////////////////////////
    private TableModelStep2 tableModelStep2;

    private TableModelStep2 getTableModelStep2(boolean refresh) {

        if (refresh)
            tableModelStep2 = null;

        if (tableModelStep2 != null)
            return tableModelStep2;

        java.io.File dir = new java.io.File(model.getValue(STEP_1));
        java.io.File[] files = dir.listFiles(new java.io.FileFilter() {
            public boolean accept(java.io.File pathname) {
                return XML.equalsIgnoreCase(IOUtils.getExtension(pathname));
            }
        });

        int size = files == null ? 0 : files.length;
        Vector data = new Vector(size);
        for (int i = 0; i < size; i++) {
            java.util.Vector row = new java.util.Vector();

            row.add(Boolean.FALSE); // Selected

            row.add(new ImportFile(files[i])); // File

            data.add(row);

        }

        tableModelStep2 = new TableModelStep2(data);

        return tableModelStep2;

    }

    private static final int SELECTED = 0;

    private static final int VALUE = 1;

    static class TableModelStep2 extends DefaultTableModel {

        private static Vector columns = new Vector();
        static {
            columns.add("Selected");
            columns.add("Data File");
        }

        public TableModelStep2(Vector data) {
            super(data, columns);
        }

        private Class[] types = new Class[] { java.lang.Boolean.class,
                java.lang.String.class };

        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == SELECTED; // Selected
        }

        public boolean isSelected() {
            for (int r = 0; r < getRowCount(); r++)
                if (Boolean.TRUE.equals(getValueAt(r, SELECTED)))
                    return true;
            return false;
        }

        public Collection getSelected() {
            Collection c = new ArrayList();
            for (int r = 0; r < getRowCount(); r++)
                if (Boolean.TRUE.equals(getValueAt(r, SELECTED)))
                    c.add(getValueAt(r, VALUE));
            return c;
        }

    }

    // //////////////////////////////////////////////////////////////////////////
    // EXPORT STEP 3 //
    // //////////////////////////////////////////////////////////////////////////
    protected void doImport() {

        java.awt.Window w = SwingUtilities.windowForComponent(this);
        final SplashWindow splash = new SplashWindow(null,
                w instanceof java.awt.Frame ? (java.awt.Frame) w : null);
        splash.setStringPainted("Waiting for import to start ...");
        splash.setVisible(true);

        new Thread(new Runnable() {
            public void run() {
                new Thread(splash, "SplashWindow").start();
                splash
                        .setStringPainted("Importing Data File(s)...   Please Wait...");

                try {

                    StringBuffer sb = new StringBuffer();
                    ExportData exportData = new ExportData();
                    try {
                        sb.append("Import Summary\n");
                        sb
                                .append("--------------------------------------------------------------\n");

                        int i = 0;
                        Iterator iter = tableModelStep2.getSelected()
                                .iterator();
                        while (iter.hasNext()) {
                            ImportFile file = (ImportFile) iter.next();

                            String msg = "" + ++i + "). Importing data from '"
                                    + file.toString() + "'";
                            sb.append("\t" + msg);
                            splash.setStringPainted(msg);

                            exportData.importFile(file.getCanonicalPath());

                            sb.append("\tOK\n");

                        }

                        sb.append("SUCCESS");

                    } catch (Exception e) {
                        sb.append("FAILED\t" + e.getMessage());
                        model.putValue(WIZARD, STEP_3);

                        e.printStackTrace(System.err);
                        return;

                    } finally {
                        ((FTextArea) textAreaDetailsStep4).setText(sb
                                .toString(), true);
                    }

                    model.putValue(WIZARD, STEP_4);
                    model.sendNotification(new Object());

                } finally {
                    splash.close();
                }

            }
        }, "doImport").start();

    }

    // //////////////////////////////////////////////////////////////////////////
    // EXPORT STEP 4 //
    // //////////////////////////////////////////////////////////////////////////
    protected void doReport() {

        try {
            System.out.println("ImportDataView::doReport()");
            /*
             * ReportFields.generateReport( SwingUtilities.windowForComponent(
             * this ), getReportData( getPerson() ), getDefaultReport() );
             */
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

    }

    // //////////////////////////////////////////////////////////////////////////
    // MODEL
    // //////////////////////////////////////////////////////////////////////////
    public void reset() {

        jButtonImport.setEnabled(false);

        jButtonReport.setEnabled(false);
        jButtonReport.setVisible(false);

        // reset model data
        model.reset();

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                // finaly show first card
                wch.show(jPanelCards, STEP_1);
            }
        });

    }

    public class ImportComponentModel extends AbstractComponentModel {

        public static final String ENABLE = "Import.Enable=true";

        public static final String DISABLE = "Import.Enable=false";

        public static final String UPDATE = "Table.Update=true";

        public void reset() {
            super.reset();

            putValue(WIZARD, STEP_1);

            sendNotification(new Object());
            validate("");
            setModified(false);

        }

        public void calculate(String whoIsChanged) {
            // System.out.println( "ImportComponentModel::calculate( " +
            // whoIsChanged + " )" );

            String step = getValue(WIZARD);
            // System.out.println( "\tstep=" + step );

            if (tableModelStep2 != null) {
                int count = 0;
                StringBuffer summary = new StringBuffer();
                summary.append("Import Data File(s) from '" + getValue(STEP_1)
                        + "' directory\n");
                summary
                        .append("--------------------------------------------------------------\n");

                Iterator iter = tableModelStep2.getSelected().iterator();
                while (iter.hasNext()) {
                    Object file = iter.next();

                    summary.append(++count + "). ");
                    summary.append(file.toString());
                    summary.append("\n");

                }

                putValue(STEP_3, summary.toString());

            }

        }

        public boolean validate(String whoIsChanged) {
            // System.out.println( "ImportComponentModel::validate( " +
            // whoIsChanged + " )" );

            if (getValue(STEP_1).length() == 0) { // source dir empty
                putValue(WIZARD, STEP_1); // FAILED
                return true;
            }
            putValue(WIZARD, STEP_2); // SUCCESS

            String step = getValue(WIZARD);
            // System.out.println( "\tstep=" + step );

            if (STEP_1.equals(whoIsChanged)) // source dir is not empty
                sendMessage(whoIsChanged, MessageSent.INFO, UPDATE);

            if (tableModelStep2 == null || !tableModelStep2.isSelected()) { // nothing
                                                                            // selected
                putValue(WIZARD, STEP_2); // FAILED
                return true;
            }
            putValue(WIZARD, STEP_3); // SUCCESS

            if (STEP_2.equals(step) || STEP_3.equals(step)
                    || STEP_4.equals(step))
                sendMessage(whoIsChanged, MessageSent.INFO, ENABLE);
            else
                sendMessage(whoIsChanged, MessageSent.INFO, DISABLE);

            return true;

        }

    }

    // //////////////////////////////////////////////////////////////////////////
    // Override base class methods here
    // //////////////////////////////////////////////////////////////////////////
    public void messageSent(MessageSentEvent e) {

        if (ImportComponentModel.ENABLE.equals(e.getMessage()))
            jButtonImport.setEnabled(true);

        else if (ImportComponentModel.DISABLE.equals(e.getMessage()))
            jButtonImport.setEnabled(false);

        else if (ImportComponentModel.UPDATE.equals(e.getMessage())) {

            // init client's table model ( export list )
            SortedTableModel sortedTableModel = new SortedTableModel(
                    getTableModelStep2(true));
            tableStep2.setModel(sortedTableModel);

            TableColumnModel tcm = tableStep2.getColumnModel();
            tcm.getColumn(SELECTED).setPreferredWidth(50);
            tcm.getColumn(SELECTED).setMinWidth(20);
            tcm.getColumn(SELECTED).setMaxWidth(50);
            tcm.getColumn(VALUE).setPreferredWidth(200);

            sortedTableModel.addMouseListenerToHeaderInTable(tableStep2);

        }

    }

}
