/*
 * AddAssetPersonalView3.java
 *
 * Created on 22 May 2003, 09:53
 */

package com.argus.financials.ui.financials;

import com.argus.financials.api.InvalidCodeException;
import com.argus.financials.api.bean.ICode;

/**
 * 
 * @author valeri chibaev
 * @version
 */

import com.argus.financials.bean.AssetPersonal;
import com.argus.financials.code.OwnerCode;
import com.argus.financials.swing.CurrencyInputVerifier;
import com.argus.financials.swing.DateInputVerifier;
import com.argus.financials.swing.SwingUtil;
import com.argus.format.Currency;
import com.argus.util.DateTimeUtils;
import com.argus.util.ReferenceCode;

public class AddAssetPersonalView extends AddFinancialView {

    private boolean thisCTOR = false;

    private static AddAssetPersonalView view;

    /** Creates new form AddPersPhyAsset */
    private AddAssetPersonalView() {
        setPreferredSize(new java.awt.Dimension(getDefaultWidth(),
                getDefaultHeight()));
        setMinimumSize(new java.awt.Dimension(getDefaultWidth(),
                getDefaultHeight()));

        thisCTOR = true;
        try {
            initComponents();
            // setLayout(new javax.swing.BoxLayout(this,
            // javax.swing.BoxLayout.Y_AXIS));
        } finally {
            thisCTOR = false;
        }

    }

    protected int getDefaultHeight() {
        return 300;
    }

    public static AddAssetPersonalView getInstance() {
        if (view == null)
            view = new AddAssetPersonalView();
        return view;
    }

    public static boolean exists() {
        return view != null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {// GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelName = new javax.swing.JPanel();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox(financialService.findFinancialTypes(getObjectType()));
        jLabelOwnerCode = new javax.swing.JLabel();
        jComboBoxOwnerCode = new javax.swing.JComboBox(OWNERS);
        jLabelDesc = new javax.swing.JLabel();
        jTextFieldDesc = new javax.swing.JTextField();
        jPanelValue = new javax.swing.JPanel();
        jLabelPurchaseCost = new javax.swing.JLabel();
        jTextFieldPurchaseCost = new javax.swing.JTextField();
        jLabelStartDate = new javax.swing.JLabel();
        jTextFieldStartDate = new com.argus.bean.FDateChooser();
        jLabelInsured = new javax.swing.JLabel();
        jCheckBoxInsured = new javax.swing.JCheckBox();
        jLabelReplacementValue = new javax.swing.JLabel();
        jTextFieldReplacementValue = new javax.swing.JTextField();
        jLabelMarketValue = new javax.swing.JLabel();
        jTextFieldMarketValue = new javax.swing.JTextField();
        jLabelCapitalGrowth11 = new javax.swing.JLabel();
        jLabelCapitalGrowth1 = new javax.swing.JLabel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        jPanelName.setLayout(new java.awt.GridBagLayout());

        jPanelName.setBorder(new javax.swing.border.TitledBorder("Name"));
        jLabelType.setText("Asset Type *");
        jLabelType.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelType.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelName.add(jLabelType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelName.add(jComboBoxType, gridBagConstraints);

        jLabelOwnerCode.setText("Owner *");
        jLabelOwnerCode.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelOwnerCode.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelName.add(jLabelOwnerCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelName.add(jComboBoxOwnerCode, gridBagConstraints);

        jLabelDesc.setText("Notes/Comments");
        jLabelDesc.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelDesc.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanelName.add(jLabelDesc, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        gridBagConstraints.weightx = 1.0;
        jPanelName.add(jTextFieldDesc, gridBagConstraints);

        add(jPanelName);

        jPanelValue.setLayout(new java.awt.GridBagLayout());

        jPanelValue.setBorder(new javax.swing.border.TitledBorder("Value"));
        jLabelPurchaseCost.setText("Purchase Cost");
        jLabelPurchaseCost.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelPurchaseCost.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jLabelPurchaseCost, gridBagConstraints);

        jTextFieldPurchaseCost
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldPurchaseCost
                .setPreferredSize(new java.awt.Dimension(120, 19));
        jTextFieldPurchaseCost.setInputVerifier(CurrencyInputVerifier
                .getInstance());
        jTextFieldPurchaseCost.setMinimumSize(new java.awt.Dimension(120, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jTextFieldPurchaseCost, gridBagConstraints);

        jLabelStartDate.setText("Purchase Date");
        jLabelStartDate.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelStartDate.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jLabelStartDate, gridBagConstraints);

        jTextFieldStartDate.setInputVerifier(DateInputVerifier.getInstance());
        jTextFieldStartDate.setPreferredSize(new java.awt.Dimension(120, 19));
        jTextFieldStartDate.setMinimumSize(new java.awt.Dimension(120, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jTextFieldStartDate, gridBagConstraints);

        jLabelInsured.setText("Insured");
        jLabelInsured.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelInsured.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jLabelInsured, gridBagConstraints);

        jCheckBoxInsured.setPreferredSize(new java.awt.Dimension(120, 19));
        jCheckBoxInsured.setMinimumSize(new java.awt.Dimension(120, 19));
        jCheckBoxInsured.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxInsuredItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jCheckBoxInsured, gridBagConstraints);

        jLabelReplacementValue.setText("Insured Value");
        jLabelReplacementValue
                .setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelReplacementValue.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jLabelReplacementValue, gridBagConstraints);

        jTextFieldReplacementValue
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldReplacementValue.setPreferredSize(new java.awt.Dimension(120,
                19));
        jTextFieldReplacementValue.setInputVerifier(CurrencyInputVerifier
                .getInstance());
        jTextFieldReplacementValue.setMinimumSize(new java.awt.Dimension(120,
                19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jTextFieldReplacementValue, gridBagConstraints);

        jLabelMarketValue.setText("Market Value *");
        jLabelMarketValue.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelMarketValue.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jLabelMarketValue, gridBagConstraints);

        jTextFieldMarketValue
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldMarketValue.setPreferredSize(new java.awt.Dimension(120, 19));
        jTextFieldMarketValue.setInputVerifier(CurrencyInputVerifier
                .getInstance());
        jTextFieldMarketValue.setMinimumSize(new java.awt.Dimension(120, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelValue.add(jTextFieldMarketValue, gridBagConstraints);

        jLabelCapitalGrowth11.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelCapitalGrowth11.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanelValue.add(jLabelCapitalGrowth11, gridBagConstraints);

        jLabelCapitalGrowth1.setPreferredSize(new java.awt.Dimension(120, 20));
        jLabelCapitalGrowth1.setMinimumSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanelValue.add(jLabelCapitalGrowth1, gridBagConstraints);

        add(jPanelValue);

    }// GEN-END:initComponents

    private void jCheckBoxInsuredItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_jCheckBoxInsuredItemStateChanged
        if (evt.getSource() != jCheckBoxInsured)
            return;

        boolean insured = evt.getStateChange() == evt.SELECTED;

        SwingUtil.setEnabled(jTextFieldReplacementValue, insured);
        if (!insured)
            jTextFieldReplacementValue.setText(null);
    }// GEN-LAST:event_jCheckBoxInsuredItemStateChanged

    // overrite Container method to allow design time UI development
    public void add(java.awt.Component comp, Object constraints) {
        jPanelDetails.add(comp, constraints);
    }

    public java.awt.Component add(java.awt.Component comp) {
        return thisCTOR ? jPanelDetails.add(comp) : super.add(comp);
        // return jPanelDetails.add( comp ); // ??? called from base class ctor
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelName;

    private javax.swing.JLabel jLabelInsured;

    private javax.swing.JTextField jTextFieldDesc;

    private javax.swing.JLabel jLabelDesc;

    private javax.swing.JLabel jLabelReplacementValue;

    private javax.swing.JTextField jTextFieldReplacementValue;

    private javax.swing.JPanel jPanelValue;

    private javax.swing.JLabel jLabelCapitalGrowth11;

    private com.argus.bean.FDateChooser jTextFieldStartDate;

    private javax.swing.JTextField jTextFieldPurchaseCost;

    private javax.swing.JLabel jLabelCapitalGrowth1;

    private javax.swing.JLabel jLabelType;

    private javax.swing.JLabel jLabelMarketValue;

    private javax.swing.JComboBox jComboBoxType;

    private javax.swing.JTextField jTextFieldMarketValue;

    private javax.swing.JLabel jLabelPurchaseCost;

    private javax.swing.JLabel jLabelStartDate;

    private javax.swing.JComboBox jComboBoxOwnerCode;

    private javax.swing.JLabel jLabelOwnerCode;

    private javax.swing.JCheckBox jCheckBoxInsured;

    // End of variables declaration//GEN-END:variables

    public boolean updateView() {

        if (!super.updateView())
            return false;

        Currency curr = Currency.getCurrencyInstance();

        AssetPersonal assetPersonal = getAssetPersonal();

        ICode refCode = assetPersonal.getFinancialType();
        jComboBoxType.setSelectedItem(refCode);

        jTextFieldDesc.setText(assetPersonal.getFinancialDesc());

        Integer id = assetPersonal.getOwnerCodeID();
        jComboBoxOwnerCode.setSelectedItem(new OwnerCode()
                .getCodeDescription(id));

        java.math.BigDecimal amount = assetPersonal.getPurchaseCost();
        jTextFieldPurchaseCost.setText(amount == null ? null : curr
                .toString(amount));

        java.util.Date date = assetPersonal.getStartDate();
        jTextFieldStartDate.setText(date == null ? null : DateTimeUtils
                .asString(date, null));

        amount = assetPersonal.getReplacementValue();
        jTextFieldReplacementValue.setText(amount == null ? null : curr
                .toString(amount));
        jCheckBoxInsured.setSelected(amount != null);
        SwingUtil.setEnabled(jTextFieldReplacementValue, amount != null);

        amount = assetPersonal.getAmount();
        jTextFieldMarketValue.setText(amount == null ? null : curr
                .toString(amount));

        return true;

    }

    protected void checkRequiredFields(boolean showMessage)
            throws InvalidCodeException {
        String msg = "";

        Currency curr = getCurrencyInstance();

        if (jComboBoxType.getSelectedIndex() <= 0)
            msg += "Asset Type is required.\n";

        Integer ownerCodeID = new OwnerCode()
                .getCodeID((String) jComboBoxOwnerCode.getSelectedItem());
        if (ownerCodeID == null)
            msg += "Owner is required.\n";

        java.math.BigDecimal amount = curr
                .getBigDecimalValue(jTextFieldMarketValue.getText());
        if (amount == null)
            msg += "Market Value is required.\n";

        msg += checkDateField(jTextFieldStartDate, "Purchase Date");

        if (msg.length() == 0)
            return;

        if (showMessage)
            javax.swing.JOptionPane.showMessageDialog(this, msg, "ERROR",
                    javax.swing.JOptionPane.ERROR_MESSAGE);

        throw new InvalidCodeException(msg);

    }

    public boolean saveView() throws InvalidCodeException {

        checkRequiredFields(true);

        Currency curr = Currency.getCurrencyInstance();

        AssetPersonal assetPersonal = getAssetPersonal();

        ReferenceCode refCode = (ReferenceCode) jComboBoxType.getSelectedItem();
        assetPersonal.setFinancialType(refCode);

        assetPersonal.setFinancialDesc(jTextFieldDesc.getText());

        String s = (String) jComboBoxOwnerCode.getSelectedItem();
        assetPersonal.setOwnerCodeID(new OwnerCode().getCodeID(s));

        java.math.BigDecimal amount = curr
                .getBigDecimalValue(jTextFieldPurchaseCost.getText());
        assetPersonal.setPurchaseCost(amount);

        java.util.Date date = DateTimeUtils.getSqlDate(jTextFieldStartDate
                .getText());
        assetPersonal.setStartDate(date);

        amount = curr.getBigDecimalValue(jTextFieldReplacementValue.getText());
        assetPersonal.setReplacementValue(amount);

        amount = curr.getBigDecimalValue(jTextFieldMarketValue.getText());
        assetPersonal.setAmount(amount);

        return true;

    }

    public AssetPersonal getAssetPersonal() {
        if (getObject() == null)
            setObject(new AssetPersonal());
        return (AssetPersonal) getObject();
    }

    public Integer getObjectType() {
        return AssetPersonal.OBJECT_TYPE_ID;
    }

    public String getTitle() {
        return RC_ASSET_PERSONAL.getDescription();
    }

}
