/*
 * ImportDataView.java
 *
 * Created on 19 June 2003, 12:57
 */

package com.argus.financials.ui.sql;

/**
 * 
 * @author Valeri CHIBAEV (mailto:apollosoft.net.au@gmail.com)
 */

import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import com.argus.bean.AbstractComponentModel;
import com.argus.bean.FTable;
import com.argus.bean.FTextField;
import com.argus.bean.MessageSent;
import com.argus.bean.MessageSentEvent;
import com.argus.bean.WizardContentHandler;
import com.argus.financials.assetinvestment.AvailableInvestmentsTableRow;
import com.argus.financials.exchange.AssetProcessor;
import com.argus.financials.swing.ICloseDialog;
import com.argus.financials.swing.SwingUtil;
import com.argus.financials.ui.financials.AssetInvestmentSelectionByView;
import com.argus.swing.SplashWindow;
import com.argus.util.KeyValue;

public class AssetSwapView extends com.argus.bean.BasePanel implements
        ICloseDialog {

    private static final String WIZARD = "Wizard";

    private static final String STEP_1 = "1";

    private static final String STEP_1_JOURNAL = "Journal Name";

    private static final String STEP_1_REPLACE = "Replace";

    private static final String STEP_1_REPLACE_WITH = "Replace With";

    private static final String STEP_2 = "2";

    private static final String STEP_3 = "3";

    public static final int CANCEL_OPTION = javax.swing.JOptionPane.CANCEL_OPTION;

    public static final int OK_OPTION = javax.swing.JOptionPane.OK_OPTION;

    private int result; // CANCEL_OPTION, OK_OPTION

    private Object[][] steps;

    private AssetManagerModel model;

    private WizardContentHandler wch;

    private AssetProcessor assetProcessor = new AssetProcessor();

    /** Creates new form ImportDataView */
    public AssetSwapView() {
        initComponents();

        tableStep2.setShowVerticalLines(false);

        steps = new Object[][] { { STEP_1, "Select Assets", jPanelStep1 },
                { STEP_2, "Summary of Changes to be done", jPanelStep2 },
                { STEP_3, "Summary of Changes", jPanelStep3 }, };

        jLabelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/image/AssetReplace.jpg")));

        model = new AssetManagerModel();
        addFormDataModel(model);
        model.addModelDataChangedListener(this);
        model.addMessageSentListener(this);

        // Add wizard content handler
        wch = new WizardContentHandler(jPanelCards);
        jPanelCards.setLayout(wch);

        for (int i = 0; i < steps.length; i++) {
            wch.addItem(new KeyValue(steps[i][1], steps[i][0]));
            wch.addLayoutComponent((java.awt.Component) steps[i][2],
                    steps[i][0]);
        }

        wch.setButtonNext(jButtonNext);
        wch.setButtonPrevious(jButtonPrevious);
        wch.setLabel(jLabelInfo);

        wch.addFormDataChangedListener(this);
        wch.registerComponent(WIZARD, this);

        jPanelSteps.add(wch.getPanel());

        addChangedListener();
        registerComponents();

        // reset to initial state
        reset();

    }

    private void addChangedListener() {

        ((FTextField) textFieldJournalNameStep1)
                .addFormDataChangedListener(this);
        ((FTextField) textFieldReplaceAssetStep1)
                .addFormDataChangedListener(this);
        ((FTextField) textFieldReplaceWithAssetStep1)
                .addFormDataChangedListener(this);

        ((FTable) tableStep2).addFormDataChangedListener(this);

        ((FTable) tableStep3).addFormDataChangedListener(this);

    }

    private void registerComponents() {

        ((FTextField) textFieldJournalNameStep1).registerComponent(
                STEP_1_JOURNAL, this);
        ((FTextField) textFieldReplaceAssetStep1).registerComponent(
                STEP_1_REPLACE, this);
        ((FTextField) textFieldReplaceWithAssetStep1).registerComponent(
                STEP_1_REPLACE_WITH, this);

        ((FTable) tableStep2).registerComponent(STEP_2, this);

        ((FTable) tableStep3).registerComponent(STEP_3, this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {// GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelNavigation = new javax.swing.JPanel();
        jLabelImage = new javax.swing.JLabel();
        jPanelSteps = new javax.swing.JPanel();
        jSeparatorVertical = new javax.swing.JSeparator();
        jPanelCenter = new javax.swing.JPanel();
        jPanelInfo = new javax.swing.JPanel();
        jLabelInfo = new javax.swing.JLabel();
        jPanelCards = new javax.swing.JPanel();
        jPanelStep1 = new javax.swing.JPanel();
        textFieldReplaceAssetStep1 = new FTextField();
        ((FTextField) textFieldReplaceAssetStep1)
                .setFieldType(com.argus.bean.FTextField.ANY);
        jButtonReplaceAssetStep1 = new javax.swing.JButton();
        textFieldReplaceWithAssetStep1 = new FTextField();
        ((FTextField) textFieldReplaceWithAssetStep1)
                .setFieldType(com.argus.bean.FTextField.ANY);
        jButtonReplaceWithAssetStep1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textFieldJournalNameStep1 = new FTextField();
        ((FTextField) textFieldJournalNameStep1)
                .setFieldType(com.argus.bean.FTextField.ANY);
        jPanelStep2 = new javax.swing.JPanel();
        jPanelStep2text = new javax.swing.JPanel();
        jLabelStep2text = new javax.swing.JLabel();
        jScrollPaneStep2 = new javax.swing.JScrollPane();
        tableStep2 = new com.argus.bean.FTable();
        jPanelStep3 = new javax.swing.JPanel();
        jPanelStep3text = new javax.swing.JPanel();
        jLabelStep3text = new javax.swing.JLabel();
        jScrollPaneDetailsStep3 = new javax.swing.JScrollPane();
        tableStep3 = new com.argus.bean.FTable();
        jSeparatorHorizontal = new javax.swing.JSeparator();
        jPanelControls = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonReport = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonClose = new javax.swing.JButton();
        jButtonExecute = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButtonPrevious = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10,
                10, 10, 10)));
        setPreferredSize(new java.awt.Dimension(600, 370));
        jPanelNavigation.setLayout(new javax.swing.BoxLayout(jPanelNavigation,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelNavigation.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(1, 1, 1, 10)));
        jPanelNavigation.add(jLabelImage);

        jPanelSteps.setLayout(new javax.swing.BoxLayout(jPanelSteps,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelSteps.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(10, 1, 1, 1)));
        jPanelNavigation.add(jPanelSteps);

        add(jPanelNavigation);

        jSeparatorVertical.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(jSeparatorVertical);

        jPanelCenter.setLayout(new javax.swing.BoxLayout(jPanelCenter,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelCenter.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(1, 10, 10, 1)));
        jPanelInfo
                .setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jLabelInfo.setText("<html><h1>Info</h1><html>");
        jLabelInfo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelInfo.setFont(new java.awt.Font("Arial", 1, 24));
        jPanelInfo.add(jLabelInfo);

        jPanelCenter.add(jPanelInfo);

        jPanelCards.setLayout(new java.awt.CardLayout());

        jPanelCards.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(1, 1, 10, 1)));
        jPanelStep1.setLayout(new java.awt.GridBagLayout());

        textFieldReplaceAssetStep1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanelStep1.add(textFieldReplaceAssetStep1, gridBagConstraints);

        jButtonReplaceAssetStep1.setText("Search");
        jButtonReplaceAssetStep1
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonReplaceAssetStep1ActionPerformed(evt);
                    }
                });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanelStep1.add(jButtonReplaceAssetStep1, gridBagConstraints);

        textFieldReplaceWithAssetStep1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanelStep1.add(textFieldReplaceWithAssetStep1, gridBagConstraints);

        jButtonReplaceWithAssetStep1.setText("Search");
        jButtonReplaceWithAssetStep1
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonReplaceWithAssetStep1ActionPerformed(evt);
                    }
                });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanelStep1.add(jButtonReplaceWithAssetStep1, gridBagConstraints);

        jLabel3.setText("Job Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanelStep1.add(jLabel3, gridBagConstraints);

        jLabel1.setText("Replace with:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 5, 0);
        jPanelStep1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Find what:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 5, 0);
        jPanelStep1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanelStep1.add(textFieldJournalNameStep1, gridBagConstraints);

        jPanelCards.add(jPanelStep1, "ExportStep2");

        jPanelStep2.setLayout(new javax.swing.BoxLayout(jPanelStep2,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelStep2text.setLayout(new java.awt.GridLayout(1, 1));

        jLabelStep2text.setText("Step 2 Text");
        jPanelStep2text.add(jLabelStep2text);

        jPanelStep2.add(jPanelStep2text);

        tableStep2.setShowVerticalLines(false);
        tableStep2.setShowHorizontalLines(false);
        jScrollPaneStep2.setViewportView(tableStep2);

        jPanelStep2.add(jScrollPaneStep2);

        jPanelCards.add(jPanelStep2, "ExportStep1");

        jPanelStep3.setLayout(new javax.swing.BoxLayout(jPanelStep3,
                javax.swing.BoxLayout.Y_AXIS));

        jPanelStep3text.setLayout(new java.awt.GridLayout(1, 1));

        jLabelStep3text.setText("Step 3 Text");
        jPanelStep3text.add(jLabelStep3text);

        jPanelStep3.add(jPanelStep3text);

        tableStep3.setShowVerticalLines(false);
        tableStep3.setShowHorizontalLines(false);
        jScrollPaneDetailsStep3.setViewportView(tableStep3);

        jPanelStep3.add(jScrollPaneDetailsStep3);

        jPanelCards.add(jPanelStep3, "ExportStep3");

        jPanelCenter.add(jPanelCards);

        jPanelCenter.add(jSeparatorHorizontal);

        jPanelControls.setLayout(new javax.swing.BoxLayout(jPanelControls,
                javax.swing.BoxLayout.X_AXIS));

        jButtonReport.setText("Report");
        jButtonReport.setDefaultCapable(false);
        jButtonReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReportActionPerformed(evt);
            }
        });

        jPanel2.add(jButtonReport);

        jPanelControls.add(jPanel2);

        jButtonClose.setText("Close");
        jButtonClose.setDefaultCapable(false);
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonClose);

        jButtonExecute.setText("Process");
        jButtonExecute.setDefaultCapable(false);
        jButtonExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecuteActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonExecute);

        jPanelControls.add(jPanel3);

        jButtonPrevious.setText("Previous");
        jPanel4.add(jButtonPrevious);

        jButtonNext.setText("Next");
        jPanel4.add(jButtonNext);

        jPanelControls.add(jPanel4);

        jPanelCenter.add(jPanelControls);

        add(jPanelCenter);

    }// GEN-END:initComponents

    private void jButtonReplaceWithAssetStep1ActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonReplaceWithAssetStep1ActionPerformed
        AvailableInvestmentsTableRow row = getAssetInformation();
        if (row == null)
            return;

        assetProcessor
                .setFinancialCodeNew(new AssetProcessor.FinancialCode(row));
        ((FTextField) textFieldReplaceWithAssetStep1).setText(row == null ? ""
                : row.toString(), true);
    }// GEN-LAST:event_jButtonReplaceWithAssetStep1ActionPerformed

    private void jButtonReportActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonReportActionPerformed
        // new Thread( new Runnable() { public void run() {
        doReport();
        // } }, "doReport" ).start();
    }// GEN-LAST:event_jButtonReportActionPerformed

    private void jButtonExecuteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonExecuteActionPerformed
        execute();
    }// GEN-LAST:event_jButtonExecuteActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCloseActionPerformed
        // result = closeDialog(this);
        doClose(null);
    }// GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonReplaceAssetStep1ActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonReplaceAssetStep1ActionPerformed
        AvailableInvestmentsTableRow row = getAssetInformation();
        if (row == null)
            return;

        assetProcessor.setFinancialCode(new AssetProcessor.FinancialCode(row));
        ((FTextField) textFieldReplaceAssetStep1).setText(row == null ? ""
                : row.toString(), true);
    }// GEN-LAST:event_jButtonReplaceAssetStep1ActionPerformed

    private AvailableInvestmentsTableRow getAssetInformation() {
        // get search view
        AssetInvestmentSelectionByView view = AssetInvestmentSelectionByView
                .getInstance();

        // display view, modal
        java.awt.Window w = javax.swing.SwingUtilities.getWindowAncestor(this);
        java.awt.Frame frame = null;
        if (w instanceof java.awt.Dialog)
            w = w.getOwner();
        if (w instanceof java.awt.Frame)
            frame = (java.awt.Frame) w;
        SwingUtil.add2Dialog(frame, view.getViewCaption(), true, view, false,
                true);

        // was one row selected and the ok button selected?
        if (view.getSelectedRowNumber() >= 0
                && view.getResult() == javax.swing.JOptionPane.OK_OPTION)
            return view.getSelectedRow();
        return null;

    }

    public void doSave(java.awt.event.ActionEvent evt) {

    }

    public boolean isModified() {
        return model.isModified();
    }

    public static int closeDialog(ICloseDialog view) {

        int result;
        if (view.isModified()) {
            result = JOptionPane
                    .showConfirmDialog(
                            view instanceof java.awt.Component ? (java.awt.Component) view
                                    : null,
                            "Do you want to save data before closing?",
                            "Close dialog", JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE);

            if (result == JOptionPane.YES_OPTION) {
                view.doSave(null);
                result = OK_OPTION;
                view.doClose(null);

            } else if (result == JOptionPane.NO_OPTION) {
                result = OK_OPTION;
                view.doClose(null);

            } else {
                result = CANCEL_OPTION;
                // keep open
            }

        } else {
            result = OK_OPTION;
            view.doClose(null);
        }

        return result;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPrevious;

    private javax.swing.JPanel jPanelControls;

    private javax.swing.JButton jButtonNext;

    private javax.swing.JTextField textFieldReplaceAssetStep1;

    private javax.swing.JPanel jPanelCards;

    private javax.swing.JButton jButtonExecute;

    private javax.swing.JPanel jPanelStep3;

    private javax.swing.JPanel jPanelStep2;

    private javax.swing.JPanel jPanelStep1;

    private javax.swing.JScrollPane jScrollPaneStep2;

    private javax.swing.JTable tableStep3;

    private javax.swing.JTable tableStep2;

    private javax.swing.JLabel jLabelImage;

    private javax.swing.JLabel jLabelStep2text;

    private javax.swing.JPanel jPanelInfo;

    private javax.swing.JSeparator jSeparatorHorizontal;

    private javax.swing.JPanel jPanelStep2text;

    private javax.swing.JPanel jPanel4;

    private javax.swing.JButton jButtonReport;

    private javax.swing.JPanel jPanelSteps;

    private javax.swing.JPanel jPanel3;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JButton jButtonReplaceAssetStep1;

    private javax.swing.JLabel jLabelStep3text;

    private javax.swing.JTextField textFieldJournalNameStep1;

    private javax.swing.JLabel jLabelInfo;

    private javax.swing.JPanel jPanelCenter;

    private javax.swing.JPanel jPanelStep3text;

    private javax.swing.JLabel jLabel3;

    private javax.swing.JSeparator jSeparatorVertical;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JPanel jPanelNavigation;

    private javax.swing.JButton jButtonClose;

    private javax.swing.JTextField textFieldReplaceWithAssetStep1;

    private javax.swing.JScrollPane jScrollPaneDetailsStep3;

    private javax.swing.JButton jButtonReplaceWithAssetStep1;

    // End of variables declaration//GEN-END:variables

    // //////////////////////////////////////////////////////////////////////////
    // STEP 1 //
    // //////////////////////////////////////////////////////////////////////////

    // //////////////////////////////////////////////////////////////////////////
    // STEP 2 //
    // //////////////////////////////////////////////////////////////////////////
    private TableModelStep2 tableModelStep2;

    private TableModelStep2 getTableModelStep2(boolean refresh) {

        if (refresh)
            tableModelStep2 = null;

        if (tableModelStep2 != null)
            return tableModelStep2;

        try {
            tableModelStep2 = new TableModelStep2(assetProcessor
                    .getFinancialRows());
        } catch (java.sql.SQLException e) {
            e.printStackTrace(System.err);
        }

        return tableModelStep2;

    }

    static class TableModelStep2 extends DefaultTableModel {

        private static final int FINANCIAL = 0;

        private static Vector columns = new Vector();
        static {
            columns.add("Records");
        }

        public TableModelStep2(Vector data) {
            super(data, columns);
        }

        private Class[] types = new Class[] { java.lang.String.class };

        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

    }

    // //////////////////////////////////////////////////////////////////////////
    // STEP 3 //
    // //////////////////////////////////////////////////////////////////////////
    private TableModelStep3 tableModelStep3;

    private TableModelStep3 getTableModelStep3(AssetProcessor.Journal batch,
            boolean refresh) {

        if (refresh)
            tableModelStep3 = null;

        if (tableModelStep3 != null)
            return tableModelStep3;

        try {
            tableModelStep3 = new TableModelStep3(assetProcessor
                    .getFinancialJournalRows(batch));
        } catch (java.sql.SQLException e) {
            e.printStackTrace(System.err);
        }

        return tableModelStep3;

    }

    static class TableModelStep3 extends DefaultTableModel {

        private static final int FINANCIAL = 0;

        private static Vector columns = new Vector();
        static {
            columns.add("Records");
        }

        public TableModelStep3(Vector data) {
            super(data, columns);
        }

        private Class[] types = new Class[] { java.lang.String.class };

        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

    }

    protected void execute() {

        java.awt.Window w = SwingUtilities.windowForComponent(this);

        // get name for swap journal
        final String journalDesc = model.getValue(STEP_1_JOURNAL);

        final SplashWindow splash = new SplashWindow(null,
                w instanceof java.awt.Frame ? (java.awt.Frame) w : null);
        splash.setStringPainted("Waiting for Assets Swap to start ...");
        splash.setVisible(true);

        new Thread(new Runnable() {
            public void run() {
                new Thread(splash, "SplashWindow").start();
                splash.setStringPainted("Assets Swap ...   Please Wait...");

                try {

                    Object whoIsChanged = null;
                    try {
                        AssetProcessor.Journal batch = assetProcessor
                                .executeSwap(journalDesc);
                        whoIsChanged = batch;

                    } catch (Exception e) {
                        whoIsChanged = e;
                        e.printStackTrace(System.err);
                    }

                    // update changes done summary table
                    model.sendMessage(whoIsChanged, MessageSent.INFO,
                            AssetManagerModel.UPDATE3);

                    model.putValue(WIZARD, STEP_3);
                    model.sendNotification(new Object());

                } finally {
                    splash.close();
                }

            }
        }, "doImport").start();

    }

    // //////////////////////////////////////////////////////////////////////////
    // EXPORT STEP 4 //
    // //////////////////////////////////////////////////////////////////////////
    protected void doReport() {

        try {
            System.out.println("ImportDataView::doReport()");
            /*
             * ReportFields.generateReport( SwingUtilities.windowForComponent(
             * this ), getReportData( getPerson() ), getDefaultReport() );
             */
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

    }

    // //////////////////////////////////////////////////////////////////////////
    // MODEL
    // //////////////////////////////////////////////////////////////////////////
    public void reset() {

        jButtonExecute.setEnabled(false);

        jButtonReport.setEnabled(false);
        jButtonReport.setVisible(false);

        // reset model data
        model.reset();

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                // finaly show first card
                wch.show(jPanelCards, STEP_1);
            }
        });

    }

    public class AssetManagerModel extends AbstractComponentModel {

        public static final String ENABLE = "Execute.Enable=true";

        public static final String DISABLE = "Execute.Enable=false";

        public static final String UPDATE2 = "Table2.Update=true";

        public static final String UPDATE3 = "Table3.Update";

        public void reset() {
            super.reset();

            putValue(WIZARD, STEP_1);

            sendNotification(new Object());
            validate("");
            setModified(false);

        }

        public void calculate(String whoIsChanged) {
            System.out.println("AssetManagerModel::calculate( '" + whoIsChanged
                    + "' )");

            // String step = getValue( WIZARD );
            // System.out.println( "\tstep=" + step );

        }

        public boolean validate(String whoIsChanged) {
            System.out.println("AssetManagerModel::validate( '" + whoIsChanged
                    + "' )");

            if (getValue(STEP_1_JOURNAL).trim().length() == 0
                    || getValue(STEP_1_REPLACE).trim().length() == 0
                    || getValue(STEP_1_REPLACE_WITH).trim().length() == 0) { // at
                                                                                // least
                                                                                // one
                                                                                // is
                                                                                // empty
                putValue(WIZARD, STEP_1); // FAILED
                sendMessage(whoIsChanged, MessageSent.INFO, DISABLE);
                return true;
            }
            putValue(WIZARD, STEP_2); // SUCCESS

            if (STEP_1_JOURNAL.equals(whoIsChanged)
                    || STEP_1_REPLACE.equals(whoIsChanged)
                    || STEP_1_REPLACE_WITH.equals(whoIsChanged)) // both are
                                                                    // not empty
                sendMessage(whoIsChanged, MessageSent.INFO, UPDATE2); // update
                                                                        // suggested
                                                                        // summary
                                                                        // table

            // String step = getValue( WIZARD );
            // System.out.println( "\tstep=" + step );

            // if ( STEP_2.equals( step ) || STEP_3.equals( step ) )
            sendMessage(whoIsChanged, MessageSent.INFO, ENABLE);

            return true;

        }

    }

    // //////////////////////////////////////////////////////////////////////////
    // Override base class methods here
    // //////////////////////////////////////////////////////////////////////////
    public void messageSent(MessageSentEvent e) {
        System.out.println("AssetSwapView::messageSent() " + e.getMessage());

        if (AssetManagerModel.ENABLE.equals(e.getMessage()))
            jButtonExecute.setEnabled(true);

        else if (AssetManagerModel.DISABLE.equals(e.getMessage()))
            jButtonExecute.setEnabled(false);

        else if (AssetManagerModel.UPDATE2.equals(e.getMessage())) {

            StringBuffer summary = new StringBuffer();
            summary.append("<HTML>");
            summary.append("<FONT SIZE=2><FONT FACE=\"Arial, sans-serif\"> ");
            summary.append("<B><U>Replace</B></U><BR> "
                    + model.getValue(STEP_1_REPLACE));
            summary.append("<BR>");
            summary.append("<B><U>with</B></U><BR> "
                    + model.getValue(STEP_1_REPLACE_WITH));
            summary.append("</FONT></FONT>");
            summary.append("</HTML>");

            jLabelStep2text.setText(summary.toString());

            // init table model ( )
            tableStep2.setModel(getTableModelStep2(true));

        } else if (AssetManagerModel.UPDATE3.equals(e.getMessage())) {

            Object sender = e.getMessageSender(); // String or Exception

            StringBuffer summary = new StringBuffer();
            summary.append("<HTML>");

            // init table model ( )
            if (sender instanceof Exception) {
                summary.append(((Exception) sender).getMessage());

                tableStep3.setModel(new DefaultTableModel());

            } else {
                summary.append(sender.toString() + ", completed successfully!");

                tableStep3.setModel(getTableModelStep3(
                        (AssetProcessor.Journal) sender, true));

            }

            summary.append("</HTML>");
            jLabelStep3text.setText(summary.toString());

        }

    }

}
