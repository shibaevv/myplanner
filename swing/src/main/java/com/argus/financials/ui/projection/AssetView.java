/*
 * AssetView.java
 *
 * Created on 13 September 2001, 12:25
 */

package com.argus.financials.ui.projection;

/**
 * 
 * @author valeri chibaev
 * @version
 */

import javax.swing.JComboBox;
import javax.swing.JComponent;

import com.argus.financials.api.InvalidCodeException;
import com.argus.financials.api.ServiceException;
import com.argus.financials.api.code.FinancialClassID;
import com.argus.financials.bean.Asset;
import com.argus.financials.code.AssetCode;
import com.argus.financials.code.OwnerCode;
import com.argus.financials.etc.GrowthRate;
import com.argus.financials.projection.AssetGrowth;
import com.argus.financials.projection.DocumentNames;
import com.argus.financials.service.PersonService;
import com.argus.financials.swing.CurrencyInputVerifier;
import com.argus.financials.swing.PercentInputVerifier;
import com.argus.financials.swing.SwingUtil;
import com.argus.format.Currency;
import com.argus.format.Percent;

public class AssetView extends java.awt.Container implements
        javax.swing.event.ChangeListener, FinancialClassID {

    private JComponent parent;

    private Integer assetCodeID;

    private AssetGrowth assetGrowth;

    /** Creates new form AssetView2 */
    public AssetView(Integer assetCodeID, JComponent parent, int row) {
        this.parent = parent;

        initComponents(row);

        setAssetCode(assetCodeID);

        _setAccessibleContext();

        jComboBoxOwner.setVisible(false);

    }

    private void _setAccessibleContext() {

        String name;
        String group = new AssetCode().getCodeDescription(assetCodeID);

        name = DocumentNames.ASSET_CURRENT_VALUE;
        jTextFieldCurrentValue.getAccessibleContext().setAccessibleName(
                group + DocumentNames.DELIM + name);
        jTextFieldCurrentValue.getDocument().putProperty(DocumentNames.READY,
                Boolean.TRUE);
        jTextFieldCurrentValue.getDocument().putProperty(
                DocumentNames.GROUP_NAME, group);
        jTextFieldCurrentValue.getDocument().putProperty(DocumentNames.NAME,
                name);

        name = DocumentNames.ASSET_OWNER;
        jComboBoxOwner.getAccessibleContext().setAccessibleName(
                group + DocumentNames.DELIM + name);
        // jComboBoxOwner.getDocument().putProperty( DocumentNames.READY,
        // Boolean.TRUE );
        // jComboBoxOwner.getDocument().putProperty( DocumentNames.GROUP_NAME,
        // group );
        // jComboBoxOwner.getDocument().putProperty( DocumentNames.NAME, name );

        name = DocumentNames.ASSET_CONTRIBUTION;
        jTextFieldAddValue.getAccessibleContext().setAccessibleName(
                group + DocumentNames.DELIM + name);
        jTextFieldAddValue.getDocument().putProperty(DocumentNames.READY,
                Boolean.TRUE);
        jTextFieldAddValue.getDocument().putProperty(DocumentNames.GROUP_NAME,
                group);
        jTextFieldAddValue.getDocument().putProperty(DocumentNames.NAME, name);

        if (ASSET_CASH.equals(assetCodeID)) {
            name = DocumentNames.ASSET_INCOME_RATE;
            jTextFieldIncomeRate.getAccessibleContext().setAccessibleName(
                    group + DocumentNames.DELIM + name);
            jTextFieldIncomeRate.getDocument().putProperty(DocumentNames.READY,
                    Boolean.TRUE);
            jTextFieldIncomeRate.getDocument().putProperty(
                    DocumentNames.GROUP_NAME, group);
            jTextFieldIncomeRate.getDocument().putProperty(DocumentNames.NAME,
                    name);
        }

    }

    /**
     * javax.swing.event.ChangeListener interface
     */
    public void stateChanged(javax.swing.event.ChangeEvent changeEvent) {
        updateNonEditable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents(int row) {
        jLabelAssetName = new javax.swing.JLabel();
        jTextFieldCurrentValue = new javax.swing.JTextField();
        jComboBoxOwner = new javax.swing.JComboBox(new OwnerCode()
                .getCodeDescriptions());
        jTextFieldAddValue = new javax.swing.JTextField();
        jTextFieldIncomeRate = new javax.swing.JTextField();
        jTextFieldGrowthRate = new javax.swing.JTextField();
        jTextFieldTargetValue = new javax.swing.JTextField();

        if (!(parent.getLayout() instanceof java.awt.GridBagLayout))
            parent.setLayout(new java.awt.GridBagLayout());

        java.awt.GridBagConstraints gridBagConstraints1;

        if (row == 0) {
            javax.swing.JLabel jLabel27 = new javax.swing.JLabel();
            javax.swing.JLabel jLabelOwner = new javax.swing.JLabel();
            javax.swing.JLabel jLabel26 = new javax.swing.JLabel();
            javax.swing.JLabel jLabel29 = new javax.swing.JLabel();
            javax.swing.JLabel jLabel25 = new javax.swing.JLabel();
            javax.swing.JLabel jLabel30 = new javax.swing.JLabel();

            jLabel27.setText("Current Value");
            gridBagConstraints1 = new java.awt.GridBagConstraints();
            gridBagConstraints1.gridx = 1;
            gridBagConstraints1.gridy = 0;
            gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints1.insets = new java.awt.Insets(0, 10, 0, 10);
            parent.add(jLabel27, gridBagConstraints1);

            jLabelOwner.setText("Owner");
            jLabelOwner.setVisible(false);
            gridBagConstraints1 = new java.awt.GridBagConstraints();
            gridBagConstraints1.gridx = 2;
            gridBagConstraints1.gridy = 0;
            gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints1.insets = new java.awt.Insets(0, 10, 0, 10);
            parent.add(jLabelOwner, gridBagConstraints1);

            // jLabel26.setText("Additions p.a.");
            jLabel26.setText("Contributions p.a.");
            gridBagConstraints1 = new java.awt.GridBagConstraints();
            gridBagConstraints1.gridx = 3;
            gridBagConstraints1.gridy = 0;
            gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints1.insets = new java.awt.Insets(0, 10, 0, 10);
            parent.add(jLabel26, gridBagConstraints1);

            jLabel29.setText("Income p.a.");
            gridBagConstraints1 = new java.awt.GridBagConstraints();
            gridBagConstraints1.gridx = 4;
            gridBagConstraints1.gridy = 0;
            gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints1.insets = new java.awt.Insets(0, 10, 0, 10);
            parent.add(jLabel29, gridBagConstraints1);

            jLabel25.setText("Growth p.a.");
            gridBagConstraints1 = new java.awt.GridBagConstraints();
            gridBagConstraints1.gridx = 5;
            gridBagConstraints1.gridy = 0;
            gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints1.insets = new java.awt.Insets(0, 10, 0, 10);
            parent.add(jLabel25, gridBagConstraints1);

            jLabel30.setText("Est. Value at Target Age");
            gridBagConstraints1 = new java.awt.GridBagConstraints();
            gridBagConstraints1.gridx = 6;
            gridBagConstraints1.gridy = 0;
            gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
            gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints1.insets = new java.awt.Insets(0, 10, 0, 5);
            parent.add(jLabel30, gridBagConstraints1);
        }

        row++;

        jLabelAssetName.setText("Asset Name");
        jLabelAssetName.setPreferredSize(new java.awt.Dimension(80, 15));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = row;
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 5);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        parent.add(jLabelAssetName, gridBagConstraints1);

        jTextFieldCurrentValue
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldCurrentValue.setPreferredSize(new java.awt.Dimension(80, 21));
        jTextFieldCurrentValue.setMinimumSize(new java.awt.Dimension(80, 21));
        jTextFieldCurrentValue.setInputVerifier(CurrencyInputVerifier
                .getInstance());
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = row;
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 5);
        parent.add(jTextFieldCurrentValue, gridBagConstraints1);

        jComboBoxOwner.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 2;
        gridBagConstraints1.gridy = row;
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 5);
        parent.add(jComboBoxOwner, gridBagConstraints1);
        jComboBoxOwner.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxOwnerItemStateChanged(evt);
            }
        });

        jTextFieldAddValue
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldAddValue.setPreferredSize(new java.awt.Dimension(70, 21));
        jTextFieldAddValue.setMinimumSize(new java.awt.Dimension(70, 21));
        jTextFieldAddValue
                .setInputVerifier(CurrencyInputVerifier.getInstance());
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 3;
        gridBagConstraints1.gridy = row;
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 5);
        parent.add(jTextFieldAddValue, gridBagConstraints1);

        jTextFieldIncomeRate.setBackground(java.awt.Color.lightGray);
        jTextFieldIncomeRate
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldIncomeRate.setPreferredSize(new java.awt.Dimension(50, 21));
        jTextFieldIncomeRate.setMinimumSize(new java.awt.Dimension(50, 21));
        jTextFieldIncomeRate.setInputVerifier(PercentInputVerifier
                .getInstance());
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 4;
        gridBagConstraints1.gridy = row;
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 5);
        parent.add(jTextFieldIncomeRate, gridBagConstraints1);

        jTextFieldGrowthRate.setEditable(false);
        jTextFieldGrowthRate.setBackground(java.awt.Color.lightGray);
        jTextFieldGrowthRate
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldGrowthRate.setPreferredSize(new java.awt.Dimension(50, 21));
        jTextFieldGrowthRate.setMinimumSize(new java.awt.Dimension(50, 21));
        // jTextFieldGrowthRate.setInputVerifier(
        // PercentInputVerifier.getInstance() );
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 5;
        gridBagConstraints1.gridy = row;
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 5);
        parent.add(jTextFieldGrowthRate, gridBagConstraints1);

        jTextFieldTargetValue.setEditable(false);
        jTextFieldTargetValue.setBackground(java.awt.Color.lightGray);
        jTextFieldTargetValue
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldTargetValue.setPreferredSize(new java.awt.Dimension(90, 21));
        jTextFieldTargetValue.setMinimumSize(new java.awt.Dimension(90, 21));
        // jTextFieldTargetValue.setInputVerifier(CurrencyInputVerifier.getInstance());
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 6;
        gridBagConstraints1.gridy = row;
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.insets = new java.awt.Insets(0, 10, 0, 5);
        parent.add(jTextFieldTargetValue, gridBagConstraints1);

    }

    private void jComboBoxOwnerItemStateChanged(java.awt.event.ItemEvent evt) {
        if (evt.getSource() != jComboBoxOwner)
            return;
        JComboBox cb = (JComboBox) evt.getSource();

        String s = (String) cb.getSelectedItem();
        if (s == null || s.length() == 0)
            assetGrowth.setOwnerCodeID(null);
        else
            assetGrowth.setOwnerCodeID(new OwnerCode().getCodeID(s));
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel jLabelAssetName;

    private javax.swing.JTextField jTextFieldCurrentValue;

    private javax.swing.JComboBox jComboBoxOwner;

    private javax.swing.JTextField jTextFieldAddValue;

    private javax.swing.JTextField jTextFieldIncomeRate;

    private javax.swing.JTextField jTextFieldGrowthRate;

    private javax.swing.JTextField jTextFieldTargetValue;

    // End of variables declaration

    public void setAssetGrowth(AssetGrowth value) {
        assetGrowth = value;
    }

    public Integer getAssetCode() {
        return assetCodeID;
    }

    private void setAssetCode(Integer value) {
        jLabelAssetName.setText(new AssetCode().getCodeDescription(value));
        assetCodeID = value;

        if (ASSET_CASH.equals(assetCodeID)) {
            SwingUtil.setEnabled(jTextFieldIncomeRate, true);
            jTextFieldGrowthRate.setVisible(false);
        } else if (ASSET_SUPERANNUATION.equals(assetCodeID)) {
            SwingUtil.setEnabled(jTextFieldIncomeRate, false);
            jTextFieldGrowthRate.setVisible(true);
        } else if (ASSET_INVESTMENT.equals(assetCodeID)) {
            SwingUtil.setEnabled(jTextFieldIncomeRate, false);
            jTextFieldGrowthRate.setVisible(true);
        } else
            throw new IllegalArgumentException("Invalid code");
    }

    public void setGrowthRate(GrowthRate value) {
        Percent percent = Percent.getPercentInstance();

        // split this value between jTextFieldIncomeRate and
        // jTextFieldGrowthRate
        // for display purpose only
        if ((!ASSET_CASH.equals(assetCodeID))
                || (ASSET_CASH.equals(assetCodeID) && jTextFieldIncomeRate
                        .getText().equals("")))
            jTextFieldIncomeRate.setText(percent
                    .toString(value.getIncomeRate()));

        if (!ASSET_CASH.equals(assetCodeID))
            jTextFieldGrowthRate.setText(percent
                    .toString(value.getGrowthRate()));
    }

    void updateEditable() {

        // if ( !assetGrowth.isReady() ) return;

        String s;
        double d;
        Currency curr = Currency.getCurrencyInstance();
        Percent percent = Percent.getPercentInstance();

        d = assetGrowth.getInitialValue();
        jTextFieldCurrentValue.setText(d < 0 ? null : curr.toString(d));

        s = new OwnerCode().getCodeDescription(assetGrowth.getOwnerCodeID());
        jComboBoxOwner.setSelectedItem(s);

        d = assetGrowth.getAddValue();
        jTextFieldAddValue.setText(d < 0 ? null : curr.toString(d));

        if (ASSET_CASH.equals(assetCodeID)) {
            d = assetGrowth.getIncomeRate();
            jTextFieldIncomeRate.setText(d < 0 ? null : percent.toString(d));
        }

    }

    void updateNonEditable() {

        // if ( !assetGrowth.isReady() ) return;

        String s;
        double d;
        Currency curr = Currency.getCurrencyInstance();
        Percent percent = Percent.getPercentInstance();

        if (!ASSET_CASH.equals(assetCodeID)) {
            d = assetGrowth.getIncomeRate();
            jTextFieldIncomeRate.setText(d < 0 ? null : percent.toString(d));
        }
        d = assetGrowth.getGrowthRate();
        jTextFieldGrowthRate.setText(d < 0 ? null : percent.toString(d));

        d = assetGrowth.getTargetValue();
        jTextFieldTargetValue.setText(d < 0 ? null : curr.toString(d));

    }

    /**
     * 
     */
    public void updateView(PersonService person) throws ServiceException {
    }

    public void saveView(PersonService person) throws ServiceException,
            InvalidCodeException {
    }

    public void clearView() {
    }

    public void setVisible(boolean b) {
    }

    public Object getObject() {
        return null;
    }

    public void setObject(Object value) {

    }

    public Integer getObjectType() {
        return Asset.OBJECT_TYPE_ID;
    }

}
