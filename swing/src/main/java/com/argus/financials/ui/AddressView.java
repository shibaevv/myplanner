/*
 * AddressView.java
 *
 * Created on 1 August 2001, 16:24
 */

package com.argus.financials.ui;

import com.argus.financials.api.code.ObjectTypeConstant;
import com.argus.financials.code.AddressCode;
import com.argus.financials.code.Code;
import com.argus.financials.code.CountryCode;
import com.argus.financials.code.StateCode;
import com.argus.financials.code.SuburbPostCode;
import com.argus.financials.config.FPSLocale;
import com.argus.financials.etc.AddressDto;
import com.argus.financials.service.PersonService;
import com.argus.financials.swing.SwingUtil;
import com.argus.format.LimitedPlainDocument;

public class AddressView
    extends AbstractPanel
    implements javax.swing.event.ChangeListener {

    private static final String[] EMPTY = new String[] { "" };

    private AddressDto address;

    private Integer addressCodeID;

    // default/current countryID
    private Integer currentCountryCodeID;

    private Integer currentStateCodeID;

    private boolean updating = false;

    // private LimitedPlainDocument lpd
    /** Creates new form AddressView */
    public AddressView(Integer addressCodeID) {
        initComponents();

        // Create the document for the text area(address) of limit up to N characters.
        jTextFieldAddress.setDocument(new LimitedPlainDocument(29));
        jTextFieldAddress2.setDocument(new LimitedPlainDocument(29));

        setDefaultCountry();
        this.addressCodeID = addressCodeID;

        setPostalAddress(AddressCode.POSTAL.equals(addressCodeID));
    }

    public void setDefaultCountry() {
        currentCountryCodeID = new com.argus.financials.code.CountryCode()
                .getCodeID(FPSLocale.getInstance().getDisplayCountry());
        jComboBoxCountry.setSelectedItem(new CountryCode()
                .getCodeDescription(currentCountryCodeID));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    private void initComponents() {// GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jCheckBoxSameAs = new javax.swing.JCheckBox();
        jLabelAddress = new javax.swing.JLabel();
        jTextFieldAddress = new javax.swing.JTextField();
        jTextFieldAddress2 = new javax.swing.JTextField();
        jLabelState = new javax.swing.JLabel();
        jComboBoxState = new javax.swing.JComboBox();
        jLabelPostcode = new javax.swing.JLabel();
        jComboBoxPostcode = new javax.swing.JComboBox();
        jLabelSuburb = new javax.swing.JLabel();
        jComboBoxSuburb = new javax.swing.JComboBox();
        jLabelCountry = new javax.swing.JLabel();
        jComboBoxCountry = new javax.swing.JComboBox(new CountryCode()
                .getCodeDescriptions());
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jCheckBoxSameAs.setText("Same As ...");
        jCheckBoxSameAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSameAsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jCheckBoxSameAs, gridBagConstraints);

        jLabelAddress.setText("Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabelAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jTextFieldAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jTextFieldAddress2, gridBagConstraints);

        jLabelState.setText("State");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabelState, gridBagConstraints);

        jComboBoxState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxStateItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jComboBoxState, gridBagConstraints);

        jLabelPostcode.setText("Postcode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabelPostcode, gridBagConstraints);

        jComboBoxPostcode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPostcodeItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jComboBoxPostcode, gridBagConstraints);

        jLabelSuburb.setText("Suburb");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabelSuburb, gridBagConstraints);

        jComboBoxSuburb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSuburbItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jComboBoxSuburb, gridBagConstraints);

        jLabelCountry.setText("Country");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jLabelCountry, gridBagConstraints);

        jComboBoxCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCountryItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jComboBoxCountry, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jLabel2, gridBagConstraints);

    }// GEN-END:initComponents

    private void jComboBoxSuburbItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_jComboBoxSuburbItemStateChanged
        if (evt.getSource() == jComboBoxSuburb)
            suburbChanged();
    }// GEN-LAST:event_jComboBoxSuburbItemStateChanged

    private void jCheckBoxSameAsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBoxSameAsActionPerformed
        if (evt.getSource() == jCheckBoxSameAs)
            setSameAsClient(jCheckBoxSameAs.isSelected());
    }// GEN-LAST:event_jCheckBoxSameAsActionPerformed

    private void jComboBoxCountryItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_jComboBoxCountryItemStateChanged
        if (evt.getSource() == jComboBoxCountry)
            countryChanged(evt.getItem().toString());
    }// GEN-LAST:event_jComboBoxCountryItemStateChanged

    private void jComboBoxStateItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_jComboBoxStateItemStateChanged
        if (evt.getSource() == jComboBoxState)
            countryStateChanged();
    }// GEN-LAST:event_jComboBoxStateItemStateChanged

    private void jComboBoxPostcodeItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_jComboBoxPostcodeItemStateChanged
        if (evt.getSource() == jComboBoxPostcode)
            postCodeChanged();
    }// GEN-LAST:event_jComboBoxPostcodeItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxSuburb;

    private javax.swing.JLabel jLabelAddress;

    private javax.swing.JLabel jLabelPostcode;

    private javax.swing.JLabel jLabelSuburb;

    private javax.swing.JTextField jTextFieldAddress2;

    private javax.swing.JLabel jLabelState;

    private javax.swing.JComboBox jComboBoxState;

    private javax.swing.JComboBox jComboBoxCountry;

    private javax.swing.JComboBox jComboBoxPostcode;

    private javax.swing.JTextField jTextFieldAddress;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JCheckBox jCheckBoxSameAs;

    private javax.swing.JLabel jLabelCountry;

    // End of variables declaration//GEN-END:variables

    private void setStates(Integer countryCodeID) {
        if (jComboBoxState.isEditable())
            return;

        jComboBoxState.setModel(new javax.swing.DefaultComboBoxModel(
                new StateCode(countryCodeID).getCodeDescriptions()));
    }

    private void setPostcodes(Integer stateCodeID) {
        if (jComboBoxPostcode.isEditable())
            return;

        jComboBoxPostcode.setModel(new javax.swing.DefaultComboBoxModel(
                new SuburbPostCode(currentCountryCodeID)
                        .getPostCodes(stateCodeID)));
    }

    private void setPostcodes(Integer stateCodeID, String suburb) {
        if (jComboBoxPostcode.isEditable())
            return;

        jComboBoxPostcode
                .setModel(new javax.swing.DefaultComboBoxModel(
                        jComboBoxPostcode.isEditable() ? EMPTY
                                : new SuburbPostCode(currentCountryCodeID)
                                        .getPostCodes(stateCodeID, suburb)));
    }

    private void setSuburbs(Integer stateCodeID) {
        if (jComboBoxSuburb.isEditable())
            return;

        jComboBoxSuburb.setModel(new javax.swing.DefaultComboBoxModel(
                jComboBoxSuburb.isEditable() ? EMPTY : new SuburbPostCode(
                        currentCountryCodeID).getSuburbs(stateCodeID)));
    }

    private void setSuburbs(Integer stateCodeID, String postCode) {
        if (jComboBoxSuburb.isEditable())
            return;

        jComboBoxSuburb
                .setModel(new javax.swing.DefaultComboBoxModel(jComboBoxSuburb
                        .isEditable() ? EMPTY : new SuburbPostCode(
                        currentCountryCodeID).getSuburbs(stateCodeID, postCode)));
    }

    private void countryChanged(String country) {

        currentCountryCodeID = new CountryCode().getCodeID(country);
        currentStateCodeID = null;

        // state/postcode/suberb
        setEditable(!CountryCode.isAustralia(currentCountryCodeID));

        if (jComboBoxState.isEditable())
            return;

        // load state codes for this country (if any)
        setStates(currentCountryCodeID);
    }

    private void countryStateChanged() {
        Object state = jComboBoxState.getSelectedItem();

        // load ALL postcodes/suburbs for this state
        currentStateCodeID = new StateCode(currentCountryCodeID)
                .getCodeID((String) state);

        setPostcodes(currentStateCodeID);
        setSuburbs(currentStateCodeID);
    }

    private void postCodeChanged() {
        if (updating)
            return;

        String postCode = (String) jComboBoxPostcode.getSelectedItem();
        String suburb = (String) jComboBoxSuburb.getSelectedItem();

        updating = true;
        try {
            if (Code.NONE.equals(postCode)) {
                // set models to ALL distinct postcodes/suburbs
                setPostcodes(currentStateCodeID);
                setSuburbs(currentStateCodeID);
            } else {
                // load ALL suburbs for this state-postcode
                setSuburbs(currentStateCodeID, postCode);
                if (!Code.NONE.equals(suburb))
                    jComboBoxSuburb.setSelectedItem(suburb);
            }
        } finally {
            updating = false;
        }
    }

    private void suburbChanged() {
        if (updating)
            return;

        String suburb = (String) jComboBoxSuburb.getSelectedItem();
        String postCode = (String) jComboBoxPostcode.getSelectedItem();

        updating = true;
        try {
            if (Code.NONE.equals(suburb)) {
                // set models to ALL distinct postcodes/suburbs
                setSuburbs(currentStateCodeID);
                setPostcodes(currentStateCodeID);
            } else {
                // load ALL postcodes for this state-suburb
                setPostcodes(currentStateCodeID, suburb);
                if (!Code.NONE.equals(postCode))
                    jComboBoxPostcode.setSelectedItem(postCode);
            }

        } finally {
            updating = false;
        }

    }

    protected boolean equals(Object value1, Object value2) {
        return (value1 == null && value2 == null)
                || (value1 != null && value1.equals(value2))
                || (value2 != null && value2.equals(value1));
    }

    /***************************************************************************
     * javax.swing.event.ChangeListener interface
     **************************************************************************/
    public void stateChanged(javax.swing.event.ChangeEvent changeEvent) {

        if (changeEvent.getSource() instanceof AddressDto) {
            AddressDto sourceAddress = (AddressDto) changeEvent.getSource();

            if (!equals(address.getId(), sourceAddress
                    .getId()))
                return;

            // triggered from Address object
            try {
                updateView();
            } catch (Exception e) {
                e.printStackTrace(System.err);
            }

        }

    }

    private boolean isPostalAddress() {
        return AddressCode.POSTAL.equals(addressCodeID);
    }

    private void setPostalAddress(boolean value) {
        jCheckBoxSameAs.setText(value ? "Same As Above" : "Same As ClientView");
    }

    public void setSameAsVisible(boolean value) {
        jCheckBoxSameAs.setVisible(value);
    }

    public void setSameAsClient(boolean sameAsClient) {

        jCheckBoxSameAs.setSelected(sameAsClient);

        try {
            AddressDto clientAddress = clientService.getResidentialAddress();

            if (sameAsClient) {

                address.removeChangeListener(this);

                address.setCountryCodeId(clientAddress.getCountryCodeId());
                address.setStreetNumber(clientAddress.getStreetNumber());
                address.setStreetNumber2(clientAddress.getStreetNumber2());
                address.setStateCode(clientAddress.getStateCode());
                // address.setStateCodeID( clientAddress.getStateCodeID() ); //
                // calculated value fron state
                address.setSuburb(clientAddress.getSuburb());
                address.setPostcode(clientAddress.getPostcode());

                address.setParentAddressId(clientAddress.getId());

                updateView();

                address.addChangeListener(this);
                clientAddress.addChangeListener(address);

            } else {
                clientAddress.removeChangeListener(address);

                address.setParentAddressId(null);

            }

        } catch (Exception e) {
            e.printStackTrace(System.err);
            return;
        }

        setEnabled(!sameAsClient);

    }

    public void setEnabled(boolean en) {

        SwingUtil.setEnabled(jTextFieldAddress, en);
        SwingUtil.setEnabled(jTextFieldAddress2, en);
        SwingUtil.setEnabled(jComboBoxSuburb, en);
        SwingUtil.setEnabled(jComboBoxPostcode, en);
        SwingUtil.setEnabled(jComboBoxState, en);
        SwingUtil.setEnabled(jComboBoxCountry, en);

    }

    private void setEditable(boolean value) {
        jComboBoxState.setEditable(value);
        jComboBoxPostcode.setEditable(value);
        jComboBoxSuburb.setEditable(value);

        if (value) {
            jComboBoxState
                    .setModel(new javax.swing.DefaultComboBoxModel(EMPTY));
            jComboBoxPostcode.setModel(new javax.swing.DefaultComboBoxModel(
                    EMPTY));
            jComboBoxSuburb
                    .setModel(new javax.swing.DefaultComboBoxModel(EMPTY));
        }

    }

    /**
     * 
     */
    public void updateView() throws com.argus.financials.api.ServiceException {

        boolean sameAsClient = address.getParentAddressId() != null;
        if (jCheckBoxSameAs.isSelected() != sameAsClient)
            setSameAsClient(sameAsClient);
        setEnabled(!sameAsClient);

        jTextFieldAddress.setText(address.getStreetNumber());
        jTextFieldAddress2.setText(address.getStreetNumber2());

        currentCountryCodeID = address.getCountryCodeId();
        String country = new CountryCode()
                .getCodeDescription(currentCountryCodeID);
        jComboBoxCountry.setSelectedItem(country);

        currentStateCodeID = address.getStateCodeId();
        String currentState = address.getStateCode();

        Integer postCodeID = address.getPostcode();

        if (CountryCode.isAustralia(currentCountryCodeID)) {
            setEditable(false);

            if (currentStateCodeID == null)
                jComboBoxState.setSelectedItem(null);
            else {
                setStates(currentCountryCodeID);
                setPostcodes(currentStateCodeID);
                setSuburbs(currentStateCodeID);
                jComboBoxState.setSelectedItem(currentState);
            }

        } else {
            setEditable(true);
            currentStateCodeID = null;
            jComboBoxState.getEditor().setItem(currentState);

        }

        if (postCodeID == null)
            jComboBoxPostcode.setSelectedItem(null);
        else {
            jComboBoxPostcode.setSelectedItem(postCodeID.toString());
        }

        jComboBoxSuburb.setSelectedItem(address.getSuburb());

    }

    public AddressDto saveView() throws com.argus.financials.api.ServiceException {

        boolean notify = address.isNotify();
        if (notify)
            address.disableNotify();
        try {

            address.setAddressCodeId(addressCodeID);

            String s = jTextFieldAddress.getText();
            if (s != null && s.length() == 0)
                s = null;
            address.setStreetNumber(s);

            s = jTextFieldAddress2.getText();
            if (s != null && s.length() == 0)
                s = null;
            address.setStreetNumber2(s);

            currentCountryCodeID = new CountryCode()
                    .getCodeID((String) jComboBoxCountry.getSelectedItem());
            address.setCountryCodeId(currentCountryCodeID);

            if (CountryCode.isAustralia(currentCountryCodeID))
                address.setStateCodeId(new StateCode(currentCountryCodeID)
                        .getCodeID(getState()));
            else
                address.setStateCode(getState());

            try {
                address.setPostcode(new Integer(getPostCode()));
            } catch (NumberFormatException e) {
                System.err.println(e.getMessage());
                address.setPostcode(null);
            }

            address.setSuburb(getSuburb());

        } finally {
            if (notify)
                address.enableNotify();
        }

        return address;

    }

    private String getState() {
        if (jComboBoxState.isEditable())
            return (String) jComboBoxState.getEditor().getItem();
        return (String) jComboBoxState.getSelectedItem();
    }

    private String getPostCode() {
        if (jComboBoxPostcode.isEditable())
            return (String) jComboBoxPostcode.getEditor().getItem();
        return (String) jComboBoxPostcode.getSelectedItem();
    }

    private String getSuburb() {
        if (jComboBoxSuburb.isEditable())
            return (String) jComboBoxSuburb.getEditor().getItem();
        return (String) jComboBoxSuburb.getSelectedItem();
    }

    /**
     * 
     */
    public void updateView(PersonService person) throws com.argus.financials.api.ServiceException {
        updateView();
    }

    public void saveView(PersonService person) throws com.argus.financials.api.ServiceException {
        saveView();
    }

    public void clearView() {

        // client.util.SwingUtils.clear(this);
        jTextFieldAddress.setText(null);
        jTextFieldAddress2.setText(null);
        jComboBoxSuburb.setSelectedItem(Code.NONE);
        jComboBoxPostcode.setSelectedItem(Code.NONE);

        String s = (String) jComboBoxState.getSelectedItem();
        if (s != null && !Code.NONE.equals(s))
            jComboBoxState.setSelectedItem(Code.NONE);
        jComboBoxCountry.setSelectedItem(Code.NONE);

        if (!isPostalAddress()) {
            currentCountryCodeID = new com.argus.financials.code.CountryCode()
                    .getCodeID(FPSLocale.getInstance().getDisplayCountry());
            jComboBoxCountry.setSelectedItem(new CountryCode()
                    .getCodeDescription(currentCountryCodeID));
        }

    }

    public Object getObject() {
        return address;
    }

    public void setObject(Object value) {
        address = (AddressDto) value;
        try {
            updateView();
        } catch (com.argus.financials.api.ServiceException e) {
            e.printStackTrace(System.err);
        }
    }

    public Integer getObjectType() {
        return new Integer(ObjectTypeConstant.ADDRESS);
    }

}
