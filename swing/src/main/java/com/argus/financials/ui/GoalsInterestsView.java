/*
 * MiscellaneousView.java
 *
 * Created on 4 December 2002, 11:32
 */

package com.argus.financials.ui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Calendar;
import java.util.Collection;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;

import com.argus.financials.bean.FinancialGoal;
import com.argus.financials.code.InvestmentStrategyCode;
import com.argus.financials.etc.ActionEventID;
import com.argus.financials.service.ClientService;
import com.argus.financials.service.PersonService;
import com.argus.financials.swing.CurrencyInputVerifier;
import com.argus.financials.swing.DateInputVerifier;
import com.argus.financials.swing.IntegerInputVerifier;
import com.argus.financials.swing.PercentInputVerifier;
import com.argus.financials.swing.SwingUtil;
import com.argus.format.Currency;
import com.argus.format.LimitedPlainDocument;
import com.argus.format.Percent;
import com.argus.swing.SwingUtils;
import com.argus.util.DateTimeUtils;
import com.argus.util.ReferenceCode;

public class GoalsInterestsView extends javax.swing.JPanel implements
        ActionEventID {

    private java.sql.Date dob;

    private ClientService clientPerson;

    private Collection categories;

    private Vector selectedCategories;

    /** Creates new form MiscellaneousView */
    public GoalsInterestsView() {
        initComponents();
        initComponents2();

    }

    public void initComponents2() {
        jLabelAdd.setVisible(false);
        jLabelUpdate.setVisible(false);
        jTextFieldNewCategory.setVisible(false);
        jButtonSave.setVisible(false);
        jButtonAdd.setVisible(false);

        SwingUtils.setDefaultFont(jPopupMenu1);

        setActionMap();
        jListLeft.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                showPopup(e);
            }

            public void mouseReleased(MouseEvent e) {
                showPopup(e);
            }

            private void showPopup(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    boolean en = isSelected();
                    jMenuItemUpdate.setEnabled(en);
                    jMenuItemRemove.setEnabled(en);
                    jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
        jTextFieldNewCategory.setDocument(new LimitedPlainDocument(50));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {// GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemAdd = new javax.swing.JMenuItem();
        jMenuItemUpdate = new javax.swing.JMenuItem();
        jMenuItemRemove = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabelRetireIncome = new javax.swing.JLabel();
        jTextFieldTargeIncome = new javax.swing.JTextField();
        jLabelNotes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneNotes = new javax.swing.JTextPane();
        jTextFieldTargetAge = new javax.swing.JTextField();
        jTextFieldTargetDate = new javax.swing.JTextField();
        jTextFieldYearsToTarget = new javax.swing.JTextField();
        jLabelYearsToRetire = new javax.swing.JLabel();
        jLabelRetireDate = new javax.swing.JLabel();
        jLabelRetireAge = new javax.swing.JLabel();
        jLabelRetireIncome1 = new javax.swing.JLabel();
        jTextFieldLumpSumRequired = new javax.swing.JTextField();
        jLabelRetireIncome2 = new javax.swing.JLabel();
        jComboBoxTargetStrategy = new javax.swing.JComboBox(
                new InvestmentStrategyCode().getCodeDescriptions());
        jLabelRetireAge1 = new javax.swing.JLabel();
        jTextFieldInflation = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldNewCategory = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListLeft = new JList(new DefaultListModel());
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButtonAddItem = new javax.swing.JButton();
        jButtonRemoveItem = new javax.swing.JButton();
        jButtonAddItemAll = new javax.swing.JButton();
        jButtonRemoveAll = new javax.swing.JButton();
        jPanel91 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListRight = new JList(new DefaultListModel());
        jLabelAdd = new javax.swing.JLabel();
        jButtonAdd = new javax.swing.JButton();
        jLabelUpdate = new javax.swing.JLabel();

        jMenuItemAdd.setText("Add");
        jMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItemAdd);
        jMenuItemUpdate.setText("Modify");
        jMenuItemUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUpdateActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItemUpdate);
        jMenuItemRemove.setText("Remove");
        jMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItemRemove);

        setLayout(new java.awt.GridLayout(1, 2));

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10,
                10, 10, 10)));
        setPreferredSize(new java.awt.Dimension(650, 450));
        setMinimumSize(new java.awt.Dimension(629, 442));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder(
                new javax.swing.border.TitledBorder(""), "Goals"));
        jLabelRetireIncome.setText("ISO at Retirement ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelRetireIncome, gridBagConstraints);

        jTextFieldTargeIncome
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldTargeIncome.setPreferredSize(new java.awt.Dimension(70, 21));
        jTextFieldTargeIncome.setInputVerifier(CurrencyInputVerifier
                .getInstance());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jTextFieldTargeIncome, gridBagConstraints);

        jLabelNotes.setText("Notes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelNotes, gridBagConstraints);

        jScrollPane1.setAutoscrolls(true);
        jTextPaneNotes.setMaximumSize(new java.awt.Dimension(285, 218));
        jScrollPane1.setViewportView(jTextPaneNotes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jTextFieldTargetAge
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldTargetAge.setPreferredSize(new java.awt.Dimension(30, 20));
        jTextFieldTargetAge
                .setInputVerifier(IntegerInputVerifier.getInstance());
        jTextFieldTargetAge.setMinimumSize(new java.awt.Dimension(30, 21));
        jTextFieldTargetAge
                .setNextFocusableComponent(jTextFieldLumpSumRequired);
        jTextFieldTargetAge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldTargetAgeFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jTextFieldTargetAge, gridBagConstraints);

        jTextFieldTargetDate.setEditable(false);
        jTextFieldTargetDate.setBackground(java.awt.Color.lightGray);
        jTextFieldTargetDate
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldTargetDate.setPreferredSize(new java.awt.Dimension(70, 20));
        jTextFieldTargetDate.setInputVerifier(new DateInputVerifier());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jTextFieldTargetDate, gridBagConstraints);

        jTextFieldYearsToTarget.setEditable(false);
        jTextFieldYearsToTarget.setBackground(java.awt.Color.lightGray);
        jTextFieldYearsToTarget
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldYearsToTarget
                .setPreferredSize(new java.awt.Dimension(30, 20));
        jTextFieldYearsToTarget.setMinimumSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jTextFieldYearsToTarget, gridBagConstraints);

        jLabelYearsToRetire.setText("Years to Retirement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelYearsToRetire, gridBagConstraints);

        jLabelRetireDate.setText("Expected Retirement Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelRetireDate, gridBagConstraints);

        jLabelRetireAge.setText("Expected Retirement Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelRetireAge, gridBagConstraints);

        jLabelRetireIncome1.setText("Planned Expenditure at Retirement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelRetireIncome1, gridBagConstraints);

        jTextFieldLumpSumRequired
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldLumpSumRequired.setPreferredSize(new java.awt.Dimension(70,
                21));
        jTextFieldLumpSumRequired.setInputVerifier(CurrencyInputVerifier
                .getInstance());
        jTextFieldLumpSumRequired
                .setNextFocusableComponent(jTextFieldTargeIncome);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jTextFieldLumpSumRequired, gridBagConstraints);

        jLabelRetireIncome2.setText("Expected Retirement Income (p.a.)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelRetireIncome2, gridBagConstraints);

        jComboBoxTargetStrategy
                .setPreferredSize(new java.awt.Dimension(60, 21));
        jComboBoxTargetStrategy.setMinimumSize(new java.awt.Dimension(60, 21));
        jComboBoxTargetStrategy.setNextFocusableComponent(jTextFieldInflation);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jComboBoxTargetStrategy, gridBagConstraints);

        jLabelRetireAge1.setText("Inflation(%)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jLabelRetireAge1, gridBagConstraints);

        jTextFieldInflation
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldInflation.setPreferredSize(new java.awt.Dimension(30, 20));
        jTextFieldInflation
                .setInputVerifier(PercentInputVerifier.getInstance());
        jTextFieldInflation.setMinimumSize(new java.awt.Dimension(30, 21));
        jTextFieldInflation.setNextFocusableComponent(jScrollPane1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jTextFieldInflation, gridBagConstraints);

        add(jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(
                new javax.swing.border.TitledBorder(""),
                "Interests and Categories"));
        jTextFieldNewCategory
                .setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextFieldNewCategory.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jTextFieldNewCategory, gridBagConstraints);

        jButtonSave.setText("save");
        jButtonSave.setPreferredSize(new java.awt.Dimension(61, 21));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jButtonSave, gridBagConstraints);

        jSplitPane1.setDividerLocation(145);
        jSplitPane1.setDividerSize(0);
        jSplitPane1.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(1, 1, 1, 1)));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(200, 202));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7,
                javax.swing.BoxLayout.X_AXIS));

        jPanel7.setBorder(new javax.swing.border.TitledBorder(
                new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0,
                        0)), "Available category"));
        jScrollPane2.setViewportView(jListLeft);

        jPanel7.add(jScrollPane2);

        jSplitPane1.setLeftComponent(jPanel7);

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8,
                javax.swing.BoxLayout.X_AXIS));

        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9,
                javax.swing.BoxLayout.Y_AXIS));

        jPanel9.setPreferredSize(new java.awt.Dimension(22, 35));
        jPanel9.setMinimumSize(new java.awt.Dimension(32, 45));
        jPanel9.setMaximumSize(new java.awt.Dimension(22, 85));
        jButtonAddItem.setIcon(new javax.swing.ImageIcon(getClass()
                .getResource("/image/Forward16.gif")));
        jButtonAddItem.setToolTipText("add");
        jButtonAddItem.setFont(new java.awt.Font("Arial", 1, 12));
        jButtonAddItem.setPreferredSize(new java.awt.Dimension(30, 21));
        jButtonAddItem.setMaximumSize(new java.awt.Dimension(22, 18));
        jButtonAddItem.setMinimumSize(new java.awt.Dimension(30, 21));
        jButtonAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddItemActionPerformed(evt);
            }
        });

        jPanel9.add(jButtonAddItem);

        jButtonRemoveItem.setIcon(new javax.swing.ImageIcon(getClass()
                .getResource("/image/Back16.gif")));
        jButtonRemoveItem.setToolTipText("remove");
        jButtonRemoveItem.setFont(new java.awt.Font("Dialog", 0, 8));
        jButtonRemoveItem.setPreferredSize(new java.awt.Dimension(30, 21));
        jButtonRemoveItem.setMaximumSize(new java.awt.Dimension(22, 18));
        jButtonRemoveItem.setMinimumSize(new java.awt.Dimension(30, 21));
        jButtonRemoveItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonRemoveItemActionPerformed(evt);
                    }
                });

        jPanel9.add(jButtonRemoveItem);

        jButtonAddItemAll.setIcon(new javax.swing.ImageIcon(getClass()
                .getResource("/image/ForwardD16.gif")));
        jButtonAddItemAll.setToolTipText("add all");
        jButtonAddItemAll.setPreferredSize(new java.awt.Dimension(30, 21));
        jButtonAddItemAll.setMaximumSize(new java.awt.Dimension(22, 18));
        jButtonAddItemAll.setMinimumSize(new java.awt.Dimension(30, 21));
        jButtonAddItemAll
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButtonAddItemAllActionPerformed(evt);
                    }
                });

        jPanel9.add(jButtonAddItemAll);

        jButtonRemoveAll.setIcon(new javax.swing.ImageIcon(getClass()
                .getResource("/image/BackD16.gif")));
        jButtonRemoveAll.setToolTipText("remove all");
        jButtonRemoveAll.setPreferredSize(new java.awt.Dimension(30, 21));
        jButtonRemoveAll.setMaximumSize(new java.awt.Dimension(22, 21));
        jButtonRemoveAll.setMinimumSize(new java.awt.Dimension(30, 21));
        jButtonRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveAllActionPerformed(evt);
            }
        });

        jPanel9.add(jButtonRemoveAll);

        jPanel8.add(jPanel9);

        jPanel91.setLayout(new javax.swing.BoxLayout(jPanel91,
                javax.swing.BoxLayout.X_AXIS));

        jPanel91.setBorder(new javax.swing.border.TitledBorder(
                new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0,
                        0)), "Selected category"));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(90, 190));
        jScrollPane3.setViewportView(jListRight);

        jPanel91.add(jScrollPane3);

        jPanel8.add(jPanel91);

        jSplitPane1.setRightComponent(jPanel8);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jSplitPane1, gridBagConstraints);

        jLabelAdd.setText("Please input new category name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jLabelAdd, gridBagConstraints);

        jButtonAdd.setText("Add");
        jButtonAdd.setPreferredSize(new java.awt.Dimension(61, 21));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jButtonAdd, gridBagConstraints);

        jLabelUpdate.setText("Please enter new name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jLabelUpdate, gridBagConstraints);

        add(jPanel2);

    }// GEN-END:initComponents

    private void jMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemRemoveActionPerformed
        // Add your handling code here:
        fireActionEvent(DATA_REMOVE);
    }// GEN-LAST:event_jMenuItemRemoveActionPerformed

    private void jMenuItemUpdateActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemUpdateActionPerformed
        // Add your handling code here:
        fireActionEvent(DATA_UPDATE);
    }// GEN-LAST:event_jMenuItemUpdateActionPerformed

    private void jMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItemAddActionPerformed
        // Add your handling code here:
        fireActionEvent(DATA_ADD);
    }// GEN-LAST:event_jMenuItemAddActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonAddActionPerformed
        // Add your handling code here:
        doAdd(evt);
    }// GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonRemoveAllActionPerformed
        // Add your handling code here:
        ((DefaultListModel) (jListRight.getModel())).clear();

    }// GEN-LAST:event_jButtonRemoveAllActionPerformed

    private void jButtonAddItemAllActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonAddItemAllActionPerformed
        // Add your handling code here:
        ((DefaultListModel) (jListRight.getModel())).clear();
        DefaultListModel dtm = (DefaultListModel) (jListRight.getModel());
        ListModel lm = jListLeft.getModel();
        for (int i = 0; i < jListLeft.getModel().getSize(); i++)
            dtm.addElement(lm.getElementAt(i));
    }// GEN-LAST:event_jButtonAddItemAllActionPerformed

    private void jButtonRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonRemoveItemActionPerformed
        // Add your handling code here:
        DefaultListModel dlm = (DefaultListModel) (jListRight.getModel());
        for (int i = dlm.getSize() - 1; i >= 0; i--) {
            if (jListRight.isSelectedIndex(i))
                dlm.removeElementAt(i);
        }
        updateCategoryView();
    }// GEN-LAST:event_jButtonRemoveItemActionPerformed

    private void jButtonAddItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonAddItemActionPerformed
        // Add your handling code here:
        DefaultListModel listModel = (DefaultListModel) jListRight.getModel();

        Object[] values = jListLeft.getSelectedValues();
        for (int i = 0; i < values.length; i++) {
            Enumeration items = listModel.elements();
            boolean flag = true;
            while (items.hasMoreElements()) {
                if (((ReferenceCode) items.nextElement()).getCodeDesc().equals(
                        ((ReferenceCode) values[i]).getCodeDesc())) {
                    flag = false;
                }
            }
            if (flag)
                listModel.addElement(values[i]);

        }
        updateCategoryView();
    }// GEN-LAST:event_jButtonAddItemActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonSaveActionPerformed
        // Add your handling code here:
        doUpdate(evt);
    }// GEN-LAST:event_jButtonSaveActionPerformed

    private void jTextFieldTargetAgeFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTextFieldTargetAgeFocusLost
        // Add your handling code here:
        if (jTextFieldTargetAge.getText() == null
                || jTextFieldTargetAge.getText().length() == 0)
            return;

        if (dob == null) {
            jTextFieldTargetDate.setText(null);
            return;
        }

        int targetAge = 0;
        try {
            targetAge = Integer.parseInt(jTextFieldTargetAge.getText());
        } catch (NumberFormatException e) {
            jTextFieldTargetAge.setText(null);
            jTextFieldTargetDate.setText(null);
            jTextFieldYearsToTarget.setText(null);
            return;
        }

        GregorianCalendar calendar = new GregorianCalendar();
        calendar.setTime(dob);
        calendar.add(Calendar.YEAR, targetAge);

        jTextFieldTargetDate.setText(DateTimeUtils.asString(calendar.getTime(),
                null));

        Double age = DateTimeUtils.getAgeDouble(dob);
        jTextFieldYearsToTarget.setText(age == null ? null : ""
                + (targetAge - age.intValue()));

    }// GEN-LAST:event_jTextFieldTargetAgeFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItemUpdate;

    private javax.swing.JLabel jLabelRetireIncome2;

    private javax.swing.JLabel jLabelRetireIncome1;

    private javax.swing.JButton jButtonSave;

    private javax.swing.JLabel jLabelRetireAge;

    private javax.swing.JTextField jTextFieldTargetAge;

    private javax.swing.JButton jButtonRemoveAll;

    private javax.swing.JScrollPane jScrollPane3;

    private javax.swing.JTextField jTextFieldNewCategory;

    private javax.swing.JScrollPane jScrollPane2;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JLabel jLabelNotes;

    private javax.swing.JTextField jTextFieldTargetDate;

    private javax.swing.JTextPane jTextPaneNotes;

    private javax.swing.JList jListLeft;

    private javax.swing.JPopupMenu jPopupMenu1;

    private javax.swing.JMenuItem jMenuItemAdd;

    private javax.swing.JLabel jLabelAdd;

    private javax.swing.JPanel jPanel9;

    private javax.swing.JPanel jPanel8;

    private javax.swing.JPanel jPanel7;

    private javax.swing.JLabel jLabelUpdate;

    private javax.swing.JPanel jPanel2;

    private javax.swing.JPanel jPanel1;

    private javax.swing.JPanel jPanel91;

    private javax.swing.JLabel jLabelRetireIncome;

    private javax.swing.JButton jButtonAddItem;

    private javax.swing.JComboBox jComboBoxTargetStrategy;

    private javax.swing.JButton jButtonAddItemAll;

    private javax.swing.JTextField jTextFieldLumpSumRequired;

    private javax.swing.JLabel jLabelYearsToRetire;

    private javax.swing.JTextField jTextFieldYearsToTarget;

    private javax.swing.JLabel jLabelRetireAge1;

    private javax.swing.JButton jButtonRemoveItem;

    private javax.swing.JTextField jTextFieldInflation;

    private javax.swing.JMenuItem jMenuItemRemove;

    private javax.swing.JList jListRight;

    private javax.swing.JLabel jLabelRetireDate;

    private javax.swing.JTextField jTextFieldTargeIncome;

    private javax.swing.JButton jButtonAdd;

    private javax.swing.JSplitPane jSplitPane1;

    // End of variables declaration//GEN-END:variables

    private void doAdd(java.awt.event.ActionEvent evt) {
        String cate = jTextFieldNewCategory.getText();
        if (cate == null || cate.length() == 0 || clientPerson == null)
            return;

        Iterator iter = categories.iterator();
        while (iter.hasNext()) {
            if (((ReferenceCode) iter.next()).getCodeDesc().equalsIgnoreCase(
                    cate)) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Duplicated Name!  Please input another name!",
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        ReferenceCode category = new ReferenceCode();
        category.setCodeDesc(cate);
        category.setObject("CATEGORY");
        try {
            clientPerson.addCategory(category);
        } catch (Exception e) {
            e.printStackTrace(System.err);
            javax.swing.JOptionPane.showMessageDialog(this, e.toString(),
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        updateCategoryView();
    }

    private void doUpdate(java.awt.event.ActionEvent evt) {
        String cate = jTextFieldNewCategory.getText();
        if (cate == null || cate.length() == 0 || clientPerson == null)
            return;

        Iterator iter = categories.iterator();
        while (iter.hasNext()) {
            if (((ReferenceCode) iter.next()).getCodeDesc().equalsIgnoreCase(
                    cate)) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Duplicated Name!  Please input another name!",
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        boolean success = true;
        ReferenceCode category = (ReferenceCode) jListLeft.getSelectedValue();
        category.setCodeDesc(cate);
        try {
            clientPerson.updateCategory(category);
        } catch (Exception e) {
            success = false;
            e.printStackTrace(System.err);
            javax.swing.JOptionPane.showMessageDialog(this, e.toString(),
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        updateCategoryView();
        if (success)
            updateSelectedCategoryView(category);
    }

    public void updateView(PersonService person) throws com.argus.financials.service.client.ServiceException {
        clearView();
        if (person instanceof ClientService)
            clientPerson = (ClientService) person;

        FinancialGoal fg = person.getFinancialGoal();
        if (fg != null) {
            jTextFieldLumpSumRequired.setText(Currency.getCurrencyInstance()
                    .toString(fg.getLumpSumRequired()));
            jTextFieldTargetAge.setText(fg.getTargetAge() == null ? null : fg
                    .getTargetAge().toString());
            jTextFieldTargetAgeFocusLost(null);
            jTextFieldTargeIncome.setText(Currency.getCurrencyInstance()
                    .toString(fg.getTargetIncome()));
            jTextFieldInflation.setText(Percent.getPercentInstance().toString(
                    fg.getInflation()));
            if (fg.getTargetStrategyID() == null)
                jComboBoxTargetStrategy.setSelectedItem(null);
            else
                jComboBoxTargetStrategy
                        .setSelectedItem(new InvestmentStrategyCode()
                                .getCodeDescription(fg.getTargetStrategyID()));
            jTextPaneNotes.setText(fg.getNotes() == null ? "" : fg.getNotes());
        }
        Iterator iter = clientPerson.getSelectedCategories().iterator();
        while (iter.hasNext()) {
            ((DefaultListModel) jListRight.getModel()).addElement(iter.next());
        }
        updateCategoryView();

    }

    public void saveView(PersonService person) throws com.argus.financials.service.client.ServiceException {
        FinancialGoal fg = person.getFinancialGoal();
        if (fg == null) {
            fg = new FinancialGoal((Integer) person.getPrimaryKey());
            person.setFinancialGoal(fg);
        }

        try {
            if (jTextFieldTargetAge.getText() != null
                    && jTextFieldTargetAge.getText().length() > 0)
                fg.setTargetAge(new Integer(Integer
                        .parseInt(jTextFieldTargetAge.getText())));
            fg.setLumpSumRequired(Currency.getCurrencyInstance()
                    .getBigDecimalValue(jTextFieldLumpSumRequired.getText()));
            fg.setTargetIncome(Currency.getCurrencyInstance()
                    .getBigDecimalValue(jTextFieldTargeIncome.getText()));
            fg.setInflation(Percent.getPercentInstance().getBigDecimalValue(
                    jTextFieldInflation.getText()));
            fg.setTargetStrategyID(new InvestmentStrategyCode()
                    .getCodeID(((String) jComboBoxTargetStrategy
                            .getSelectedItem())));
            fg.setNotes(jTextPaneNotes.getText());
            Enumeration e = ((DefaultListModel) jListRight.getModel())
                    .elements();
            selectedCategories = new Vector();
            while (e.hasMoreElements()) {
                selectedCategories.add(new Integer(((ReferenceCode) e
                        .nextElement()).getCodeID()));
            }
            ((ClientService) person).addSelectedCategories(selectedCategories);
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace(System.err);
            javax.swing.JOptionPane.showMessageDialog(this, nfe.toString(),
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            fg.setTargetAge(null);

        } catch (Exception e) {
            e.printStackTrace(System.err);
            javax.swing.JOptionPane.showMessageDialog(this, e.toString(),
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }

    public void updateCategoryView() {
        try {
            categories = clientPerson.getCategories();
            jListLeft.setListData(categories.toArray());
            jTextFieldNewCategory.setText(null);
        } catch (Exception e) {
            e.printStackTrace(System.err);
            javax.swing.JOptionPane.showMessageDialog(this, e.toString(),
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }

    public void updateSelectedCategoryView(ReferenceCode category) {
        for (int i = 0; i < ((DefaultListModel) jListRight.getModel())
                .getSize(); i++) {
            if (category.getCodeID() == ((ReferenceCode) ((DefaultListModel) jListRight
                    .getModel()).get(i)).getCodeID())
                ((DefaultListModel) jListRight.getModel()).setElementAt(
                        category, i);
        }

    }

    public void clearView() {
        ((DefaultListModel) jListRight.getModel()).clear();
        SwingUtil.clear(this);
    }

    public java.sql.Date getDOB() {
        return dob;
    }

    public void setDOB(java.sql.Date value) {
        dob = value;
        jTextFieldTargetAgeFocusLost(null);
    }

    /**
     * Helper methodes
     */
    public boolean isSelected() {

        Object[] obj = jListLeft.getSelectedValues();
        if (obj == null || obj.length == 0)
            return false;

        return true;

    }

    /**
     * 
     */
    protected void setActionMap() {

        ActionMap am = this.getActionMap();
        if (am == null) {
            am = new ActionMap();
            this.setActionMap(am);
        }

        am.put(DATA_ADD, new AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAdd();
            }
        });

        am.put(DATA_UPDATE, new AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (jListLeft.getSelectedIndex() != -1) {
                    displayUpdate();
                }
            }
        });
        am.put(DATA_REMOVE, new AbstractAction() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (jListLeft.getSelectedIndex() != -1)
                    remove();
            }
        });

    }

    private static int eventID;

    private void fireActionEvent(Integer actionID) {

        javax.swing.ActionMap actionMap = getActionMap();
        if (actionMap == null)
            return;

        javax.swing.Action action = (javax.swing.Action) (actionMap
                .get(actionID));
        if (action == null)
            return;

        action.actionPerformed(new java.awt.event.ActionEvent(this, ++eventID,
                this.getClass().getName()));

    }

    private void displayUpdate() {
        jLabelUpdate.setVisible(true);
        jLabelAdd.setVisible(false);
        jTextFieldNewCategory.setVisible(true);
        jButtonSave.setVisible(true);
        jButtonAdd.setVisible(false);
        ReferenceCode rc = (ReferenceCode) jListLeft.getSelectedValue();
        jTextFieldNewCategory.setText(rc.getCodeDesc());
    }

    private void displayAdd() {
        jLabelAdd.setVisible(true);
        jLabelUpdate.setVisible(false);
        jTextFieldNewCategory.setVisible(true);
        jButtonAdd.setVisible(true);
        jButtonSave.setVisible(false);
    }

    private void remove() {

        if (clientPerson == null)
            return;

        ReferenceCode rc = (ReferenceCode) jListLeft.getSelectedValue();
        for (int i = 0; i < ((DefaultListModel) jListRight.getModel())
                .getSize(); i++) {
            if (((ReferenceCode) ((DefaultListModel) jListRight.getModel())
                    .get(i)).getCodeID() == rc.getCodeID()) {
                javax.swing.JOptionPane
                        .showMessageDialog(
                                this,
                                "This item is referenced by Selected Category and cannot be deleted!",
                                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        try {
            boolean result = clientPerson.removeCategory(rc);

            if (!result)
                javax.swing.JOptionPane
                        .showMessageDialog(
                                this,
                                "This item is being referenced now and cannot be deleted!",
                                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace(System.err);
            javax.swing.JOptionPane.showMessageDialog(this, e.toString(),
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        updateCategoryView();

    }

}
