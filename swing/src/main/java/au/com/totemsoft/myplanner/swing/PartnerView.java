/*
 * ClientView.java
 *
 * Created on 25 January 2002, 14:33
 */

package au.com.totemsoft.myplanner.swing;

import au.com.totemsoft.myplanner.api.InvalidCodeException;
import au.com.totemsoft.myplanner.api.code.ObjectTypeConstant;
import au.com.totemsoft.myplanner.config.ViewSettings;
import au.com.totemsoft.myplanner.config.WordSettings;
import au.com.totemsoft.myplanner.report.ReportFields;
import au.com.totemsoft.myplanner.service.ClientService;
import au.com.totemsoft.myplanner.service.PersonService;
import au.com.totemsoft.swing.SwingUtil;

public final class PartnerView extends PersonView2 {

    protected static int LAST = PersonView2.LAST;

    private static PartnerView view;

    private static ClientService clientService;
    public static void setClientService(ClientService clientService) {
        PartnerView.clientService = clientService;
    }

    /** Creates new ClientView */
    public PartnerView() {
        initComponents();
    }

    public static boolean exists() {
        return view != null;
    }

    public static PartnerView getPartnerView() {

        if (view == null)
            view = new PartnerView();

        return view;

    }

    public String getViewCaption() {
        return "ClientView Partner Details";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    private void initComponents() {
        getJTabbedPane().setTitleAt(0, "Partner Details");
    }

    /*
     * // has to be overriden in derived classes protected boolean isModified() {
     * try { PersonService partner =
     * RmiParams.getInstance().getClientPerson().getPartner( false ); return
     * partner == null ? false : partner.isModifiedRemote(); } catch (
     * au.com.totemsoft.myplanner.service.ServiceException e ) { e.printStackTrace( System.err ); return
     * false; } }
     */

    // Variables declaration - do not modify
    // End of variables declaration

    public void display(final java.awt.event.FocusListener[] listeners, boolean inFrame) {

        if (!exists())
            getPartnerView();

        try {
            view.updateView();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        // add/show view
        if (inFrame)
            // Component comp, final java.awt.event.FocusListener [] listeners,
            // String title, String iconImage, boolean center, boolean
            // resizable, boolean visible ) {
            SwingUtil.add2Frame(view, listeners, view.getViewCaption(),
                    ViewSettings.getInstance().getViewImage(
                            view.getClass().getName()), true, true, true);
        else
            ; // to JApplet

    }

    public void updateView() throws au.com.totemsoft.myplanner.api.ServiceException {

        // will create new person if null
        PersonService person = getPerson();
        if (person == null)
            return;

        updateView(person);

    }

    public void saveView() throws au.com.totemsoft.myplanner.api.ServiceException,
            InvalidCodeException {

        // will create new person if null
        PersonService person = getPerson();
        if (person == null)
            return;

        saveView(person);

        // save changes to database
        person.storePerson();

        // refresh data after store()
        updateView();

    }

    public void clearView() {
        super.clearView();

    }

    public Object getObject() {
        return null;
    }

    public void setObject(Object value) {

    }

    public Integer getObjectType() {
        return new Integer(ObjectTypeConstant.PERSON);
    }

    protected PersonService getPerson() throws au.com.totemsoft.myplanner.api.ServiceException {
        return clientService.getPartner(true);
    }

    protected String getDefaultReport() {
        return WordSettings.getInstance().getClientDetailsReport();
    }

    protected ReportFields getReportData(PersonService person)
            throws java.io.IOException {

        ReportFields data = ReportFields.getInstance();
        data.initialize(clientService); // do
                                                                            // it
                                                                            // for
                                                                            // client
                                                                            // !!!

        return data;
    }

}
