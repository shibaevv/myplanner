/*
 * JDialog.java
 *
 * Created on 5 September 2002, 15:31
 */

package com.argus.swing;

/**
 *
 * @author  valeri chibaev
 */

import javax.swing.JWindow;

public class SplashWindow 
	//extends JDialog
    extends JWindow
    implements Runnable 
{
    
    private String source;
    private long waitTime;
    private Thread progressRunner;
    private boolean autoProgress;
    
    /** Creates new form JDialog */
    public SplashWindow() {
        this( null, WindowFactory.getSharedOwnerFrame(), 0 );
    }
    
    public SplashWindow( String image ) {
        this( image, WindowFactory.getSharedOwnerFrame(), 0 );
    }
    
    public SplashWindow( java.awt.Frame parent ) {
        this( null, parent, 0 );
    }
    
    public SplashWindow( String image, java.awt.Frame parent ) {
        this( image, parent, 0 );
    }

    public SplashWindow( String image, java.awt.Frame parent, long waitTime ) {
        this( image, parent, waitTime, true );
    }
    
    public SplashWindow( String image, java.awt.Frame parent, long waitTime, final boolean autoProgress ) {
        this( image, parent, waitTime, autoProgress, true );
    }
    
    public SplashWindow( String image, java.awt.Frame parent, long waitTime, final boolean autoProgress, boolean modal ) {
        
        super( parent == null ? WindowFactory.getSharedOwnerFrame() : parent );
        
        this.source = image;
        this.waitTime = waitTime;
        this.autoProgress = autoProgress;
        
        initComponents();
        
        progressRunner = new Thread( "SplashWindow::progressRunner" ) {
            public void run() {
                if ( SplashWindow.this.waitTime > 0 ) {
                    new Thread( "SplashWindow::waitRunner" ) {
                        public void run() {
                            try { sleep( SplashWindow.this.waitTime ); }
                            catch(Exception e) {}
                            close();
                        }
                    }.start();
                }
        
                while ( !isInterrupted() ) {
                    synchronized (this) {
                        try {
                            wait( 500 );

                            if ( autoProgress )
                                updateProgressBar(1);

                            //SplashWindow.this.toFront();

                        } catch(InterruptedException e) {
                            break;
                        }
                    }
                }
            }
        };
        
        super.setVisible(true);
        setModal(modal);
        
    }

    public void setModal( boolean modal ) {
        //super.setModal(modal);
    }
    public void setDefaultCloseOperation(int value) {
        //super.setDefaultCloseOperation(value);
    }
    
    /*
    public void setVisible( boolean value ) {
        // do nothing
    }
    public void show() {
        // do nothing
    }
    */
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel = new javax.swing.JPanel();
        jLabelImage = new javax.swing.JLabel();
        jLabelText = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        
        jPanel.setLayout(new java.awt.BorderLayout());
        jPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        
        if ( source != null ) jLabelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource( source )));
        jPanel.add(jLabelImage, java.awt.BorderLayout.NORTH);

        jLabelText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel.add(jLabelText, java.awt.BorderLayout.CENTER);

        jPanel.add(jProgressBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width-getSize().width)/2,(screenSize.height-getSize().height)/2);
    }//GEN-END:initComponents

    private void closeDialog() {
        setVisible(false);
        dispose();
    }
    
    /** Closes the dialog */
    /**
    * @param args the command line arguments
    */
    private static void main(String args[]) {
        final SplashWindow sw = new SplashWindow(
            //null
            "/com/argus/images/logo/java.gif"
            , null
            , 10000
        );
        sw.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                sw.close();
                System.exit(0);
            }
        });
        sw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sw.close();
                System.exit(0);
            }
        });
        sw.setStringPainted("Generating Report ... Please wait ...") ;        
        new Thread( sw, "SplashWindowThread" ).start();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelImage;
    private javax.swing.JLabel jLabelText;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JPanel jPanel;
    // End of variables declaration//GEN-END:variables

    public void setStringPainted( String s ) {
        
        jProgressBar.setString(s);
        jProgressBar.setStringPainted(true);

    	//jLabelText.setText(s);
        pack();
    }
    
    public void updateProgressBar( int n ) {
        jProgressBar.setValue( jProgressBar.getValue() + n );

        if ( jProgressBar.getValue() == jProgressBar.getMaximum() )
            jProgressBar.setValue(0);
    }
    

    public void run() {
        jProgressBar.setValue(0);
        progressRunner.start();
    }
    
    public void stop() {
    	autoProgress = false;
    	jProgressBar.setValue(0);
    }
    
    public void close() {
        if ( progressRunner == null )
            return; // already closed
        
        progressRunner.interrupt();
        progressRunner = null;

        closeDialog();
        //setVisible(false);
        //progressRunner.interrupt();
        //progressRunner = null;
        //dispose();
        
    }
    
}
